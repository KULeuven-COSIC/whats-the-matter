File "case-resumption.pv", line 281, characters 44-56:
Warning: identifier resumption_id rebound.
File "case-resumption.pv", line 284, characters 9-21:
Warning: identifier resumption_id rebound.
Linear part:
mul_point(mul_point(P,a),b) = mul_point(mul_point(P,b),a)
Completing equations...
Completed equations:
mul_point(mul_point(P,a),b) = mul_point(mul_point(P,b),a)
Convergent part: No equation.
Process 0 (that is, the initial process):
{1}new ipk: key;
{2}new seed_x: bitstring;
{3}new seed_y: bitstring;
{4}let noc_verification_key: group = mul_point(P,noc_signing_key) in
{5}out(c, noc_verification_key);
(
    {6}!
    {7}new initiator_noc_key: key;
    {8}let initiator_noc: group = mul_point(P,initiator_noc_key) in
    {9}let initiator_noc_signature: bitstring = sign(noc_signing_key,initiator_noc) in
    {10}let seed_x_1: bitstring = seed_x in
    {11}let initiator_noc_key_1: key = initiator_noc_key in
    {12}let ipk_1: key = ipk in
    {13}new fresh_x: bitstring;
    {14}let x: bitstring = hash((seed_x_1,fresh_x)) in
    {15}new initiator_random: bitstring;
    {16}let gx: group = mul_point(P,x) in
    {17}let msg1: bitstring = (gx,initiator_random) in
    {18}out(c, msg1);
    {19}in(c, msg2: bitstring);
    {20}let (responder_random: bitstring,gy: group,cb: bitstring) = msg2 in
    {21}event start_session_with_responder(gy,responder_random);
    {22}let shared_secret: group = mul_point(gy,x) in
    {23}let s2k: key = kdf(shared_secret,(ipk_1,responder_random,gy,hash(msg1)),sigma2_info) in
    {24}let (responder_noc: group,responder_noc_signature: bitstring,sig_b: bitstring,resumption_id: bitstring) = aead_dec(s2k,cb,ncase_sigma2n,nil) in
    {25}if (aead_dec_validate(s2k,cb,ncase_sigma2n,nil) && (sign_verif(noc_verification_key,responder_noc_signature,responder_noc) && sign_verif(responder_noc,sig_b,(responder_noc,gy,gx)))) then
    {26}event accept_responder_identity(responder_noc,gy,responder_random);
    {27}let sig_i: bitstring = sign(initiator_noc_key_1,(initiator_noc,gx,gy)) in
    {28}let s3k: key = kdf(shared_secret,(ipk_1,hash((msg1,msg2))),sigma3_info) in
    {29}let msg3: bitstring = aead_enc(s3k,(initiator_noc,initiator_noc_signature,sig_i),ncase_sigma3n,nil) in
    {30}out(c, msg3);
    {31}let keys: key = kdf(shared_secret,(ipk_1,hash((msg1,msg2,msg3))),sekeys_info) in
    {32}event initiator_end(initiator_noc,gx,initiator_random);
    {33}out(c, enc(initiator_noc,q_id_i_i));
    {34}out(c, enc(responder_noc,q_id_r_i));
    {35}out(c, fresh_x);
    {36}out(c, enc(x,q_eph_x));
    {37}out(c, enc(shared_secret,q_shared_secret_i));
    {38}out(c, enc(keys,q_session_keys_i));
    {39}new res_initiator_random: bitstring;
    {40}let s1rk: key = kdf(shared_secret,(res_initiator_random,resumption_id),sigma1_resume) in
    {41}let initiator_resume1_mic: bitstring = aead_enc(s1rk,nil,resume1mic_nonce,nil) in
    {42}out(c, (res_initiator_random,resumption_id,initiator_resume1_mic));
    {43}in(c, (res_resumption_id: bitstring,responder_resume2_mic: bitstring));
    {44}let s2rk: key = kdf(shared_secret,(res_initiator_random,res_resumption_id),sigma2_resume) in
    {45}if aead_dec_validate(s2rk,responder_resume2_mic,resume2mic_nonce,nil) then
    {46}let resumption_keys: key = kdf(shared_secret,(res_initiator_random,res_resumption_id),sessionresumptionkeys) in
    {47}out(c, enc(resumption_keys,q_resumption_session_keys_i));
    {48}new dummy: bitstring;
    {49}event did_not_reach_end_initiator(dummy)
) | (
    {50}!
    {51}new responder_noc_key: key;
    {52}let responder_noc_1: group = mul_point(P,responder_noc_key) in
    {53}let responder_noc_signature_1: bitstring = sign(noc_signing_key,responder_noc_1) in
    {54}let seed_y_1: bitstring = seed_y in
    {55}let responder_noc_key_1: key = responder_noc_key in
    {56}let ipk_2: key = ipk in
    {57}in(c, msg1_1: bitstring);
    {58}let (gx_1: group,initiator_random_1: bitstring) = msg1_1 in
    {59}event start_session_with_initiator(gx_1,initiator_random_1);
    {60}new fresh_y: bitstring;
    {61}let y: bitstring = hash((seed_y_1,fresh_y)) in
    {62}new responder_random_1: bitstring;
    {63}new resumption_id_1: bitstring;
    {64}let gy_1: group = mul_point(P,y) in
    {65}let shared_secret_1: group = mul_point(gx_1,y) in
    {66}let s2k_1: key = kdf(shared_secret_1,(ipk_2,responder_random_1,gy_1,hash(msg1_1)),sigma2_info) in
    {67}let sig_r: bitstring = sign(responder_noc_key_1,(responder_noc_1,gy_1,gx_1)) in
    {68}let c_r: bitstring = aead_enc(s2k_1,(responder_noc_1,responder_noc_signature_1,sig_r,resumption_id_1),ncase_sigma2n,nil) in
    {69}let msg2_1: bitstring = (responder_random_1,gy_1,c_r) in
    {70}out(c, msg2_1);
    {71}in(c, msg3_1: bitstring);
    {72}let s3k_1: key = kdf(shared_secret_1,(ipk_2,hash((msg1_1,msg2_1))),sigma3_info) in
    {73}let (initiator_noc_1: group,initiator_noc_signature_1: bitstring,sig_i_1: bitstring) = aead_dec(s3k_1,msg3_1,ncase_sigma3n,nil) in
    {74}if aead_dec_validate(s3k_1,msg3_1,ncase_sigma3n,nil) then
    {75}if (sign_verif(noc_verification_key,initiator_noc_signature_1,initiator_noc_1) && sign_verif(initiator_noc_1,sig_i_1,(initiator_noc_1,gx_1,gy_1))) then
    {76}let keys_1: key = kdf(shared_secret_1,(ipk_2,hash((msg1_1,msg2_1,msg3_1))),sekeys_info) in
    {77}out(c, sigma_finished);
    {78}event responder_end(responder_noc_1,gy_1,responder_random_1);
    {79}out(c, enc(initiator_noc_1,q_id_i_r));
    {80}out(c, enc(responder_noc_1,q_id_r_r));
    {81}out(c, fresh_y);
    {82}out(c, enc(y,q_eph_y));
    {83}out(c, enc(shared_secret_1,q_shared_secret_r));
    {84}out(c, enc(keys_1,q_session_keys_r));
    {85}in(c, (res_initiator_random_1: bitstring,resumption_id_2: bitstring,initiator_resume1_mic_1: bitstring));
    {86}let s1rk_1: key = kdf(shared_secret_1,(res_initiator_random_1,resumption_id_2),sigma1_resume) in
    {87}if aead_dec_validate(s1rk_1,initiator_resume1_mic_1,resume1mic_nonce,nil) then
    {88}new resumption_id_3: bitstring;
    {89}let s2rk_1: key = kdf(shared_secret_1,(res_initiator_random_1,resumption_id_3),sigma2_resume) in
    {90}let responder_resume2_mic_1: bitstring = aead_enc(s2rk_1,nil,resume2mic_nonce,nil) in
    {91}out(c, (resumption_id_3,responder_resume2_mic_1));
    {92}let resumption_keys_1: key = kdf(shared_secret_1,(res_initiator_random_1,resumption_id_3),sessionresumptionkeys) in
    {93}out(c, enc(resumption_keys_1,q_resumption_session_keys_r));
    {94}new dummy_1: bitstring;
    {95}event did_not_reach_end_responder(dummy_1)
) | (
    {96}!
    {97}phase 1;
    {98}out(c, seed_x)
) | (
    {99}!
    {100}phase 2;
    {101}out(c, seed_y)
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}new ipk: key;
{2}new seed_x: bitstring;
{3}new seed_y: bitstring;
{4}let noc_verification_key: group = mul_point(P,noc_signing_key) in
{5}out(c, noc_verification_key);
(
    {6}!
    {7}new initiator_noc_key: key;
    {13}new fresh_x: bitstring;
    {15}new initiator_random: bitstring;
    {10}let seed_x_1: bitstring = seed_x in
    {14}let x: bitstring = hash((seed_x_1,fresh_x)) in
    {16}let gx: group = mul_point(P,x) in
    {17}let msg1: bitstring = (gx,initiator_random) in
    {18}out(c, msg1);
    {19}in(c, msg2: bitstring);
    {20}let (responder_random: bitstring,gy: group,cb: bitstring) = msg2 in
    {21}event start_session_with_responder(gy,responder_random);
    {22}let shared_secret: group = mul_point(gy,x) in
    {12}let ipk_1: key = ipk in
    {23}let s2k: key = kdf(shared_secret,(ipk_1,responder_random,gy,hash(msg1)),sigma2_info) in
    {24}let (responder_noc: group,responder_noc_signature: bitstring,sig_b: bitstring,resumption_id: bitstring) = aead_dec(s2k,cb,ncase_sigma2n,nil) in
    {25}if (aead_dec_validate(s2k,cb,ncase_sigma2n,nil) && (sign_verif(noc_verification_key,responder_noc_signature,responder_noc) && sign_verif(responder_noc,sig_b,(responder_noc,gy,gx)))) then
    {26}event accept_responder_identity(responder_noc,gy,responder_random);
    {28}let s3k: key = kdf(shared_secret,(ipk_1,hash((msg1,msg2))),sigma3_info) in
    {11}let initiator_noc_key_1: key = initiator_noc_key in
    {8}let initiator_noc: group = mul_point(P,initiator_noc_key) in
    {27}let sig_i: bitstring = sign(initiator_noc_key_1,(initiator_noc,gx,gy)) in
    {9}let initiator_noc_signature: bitstring = sign(noc_signing_key,initiator_noc) in
    {29}let msg3: bitstring = aead_enc(s3k,(initiator_noc,initiator_noc_signature,sig_i),ncase_sigma3n,nil) in
    {30}out(c, msg3);
    {32}event initiator_end(initiator_noc,gx,initiator_random);
    {33}out(c, enc(initiator_noc,q_id_i_i));
    {34}out(c, enc(responder_noc,q_id_r_i));
    {35}out(c, fresh_x);
    {36}out(c, enc(x,q_eph_x));
    {37}out(c, enc(shared_secret,q_shared_secret_i));
    {31}let keys: key = kdf(shared_secret,(ipk_1,hash((msg1,msg2,msg3))),sekeys_info) in
    {38}out(c, enc(keys,q_session_keys_i));
    {39}new res_initiator_random: bitstring;
    {40}let s1rk: key = kdf(shared_secret,(res_initiator_random,resumption_id),sigma1_resume) in
    {41}let initiator_resume1_mic: bitstring = aead_enc(s1rk,nil,resume1mic_nonce,nil) in
    {42}out(c, (res_initiator_random,resumption_id,initiator_resume1_mic));
    {43}in(c, (res_resumption_id: bitstring,responder_resume2_mic: bitstring));
    {44}let s2rk: key = kdf(shared_secret,(res_initiator_random,res_resumption_id),sigma2_resume) in
    {45}if aead_dec_validate(s2rk,responder_resume2_mic,resume2mic_nonce,nil) then
    {46}let resumption_keys: key = kdf(shared_secret,(res_initiator_random,res_resumption_id),sessionresumptionkeys) in
    {47}out(c, enc(resumption_keys,q_resumption_session_keys_i));
    {48}new dummy: bitstring;
    {49}event did_not_reach_end_initiator(dummy)
) | (
    {50}!
    {51}new responder_noc_key: key;
    {57}in(c, msg1_1: bitstring);
    {58}let (gx_1: group,initiator_random_1: bitstring) = msg1_1 in
    {59}event start_session_with_initiator(gx_1,initiator_random_1);
    {60}new fresh_y: bitstring;
    {62}new responder_random_1: bitstring;
    {63}new resumption_id_1: bitstring;
    {54}let seed_y_1: bitstring = seed_y in
    {61}let y: bitstring = hash((seed_y_1,fresh_y)) in
    {64}let gy_1: group = mul_point(P,y) in
    {55}let responder_noc_key_1: key = responder_noc_key in
    {52}let responder_noc_1: group = mul_point(P,responder_noc_key) in
    {67}let sig_r: bitstring = sign(responder_noc_key_1,(responder_noc_1,gy_1,gx_1)) in
    {65}let shared_secret_1: group = mul_point(gx_1,y) in
    {56}let ipk_2: key = ipk in
    {66}let s2k_1: key = kdf(shared_secret_1,(ipk_2,responder_random_1,gy_1,hash(msg1_1)),sigma2_info) in
    {53}let responder_noc_signature_1: bitstring = sign(noc_signing_key,responder_noc_1) in
    {68}let c_r: bitstring = aead_enc(s2k_1,(responder_noc_1,responder_noc_signature_1,sig_r,resumption_id_1),ncase_sigma2n,nil) in
    {69}let msg2_1: bitstring = (responder_random_1,gy_1,c_r) in
    {70}out(c, msg2_1);
    {71}in(c, msg3_1: bitstring);
    {72}let s3k_1: key = kdf(shared_secret_1,(ipk_2,hash((msg1_1,msg2_1))),sigma3_info) in
    {73}let (initiator_noc_1: group,initiator_noc_signature_1: bitstring,sig_i_1: bitstring) = aead_dec(s3k_1,msg3_1,ncase_sigma3n,nil) in
    {74}if aead_dec_validate(s3k_1,msg3_1,ncase_sigma3n,nil) then
    {75}if (sign_verif(noc_verification_key,initiator_noc_signature_1,initiator_noc_1) && sign_verif(initiator_noc_1,sig_i_1,(initiator_noc_1,gx_1,gy_1))) then
    {77}out(c, sigma_finished);
    {78}event responder_end(responder_noc_1,gy_1,responder_random_1);
    {79}out(c, enc(initiator_noc_1,q_id_i_r));
    {80}out(c, enc(responder_noc_1,q_id_r_r));
    {81}out(c, fresh_y);
    {82}out(c, enc(y,q_eph_y));
    {83}out(c, enc(shared_secret_1,q_shared_secret_r));
    {76}let keys_1: key = kdf(shared_secret_1,(ipk_2,hash((msg1_1,msg2_1,msg3_1))),sekeys_info) in
    {84}out(c, enc(keys_1,q_session_keys_r));
    {85}in(c, (res_initiator_random_1: bitstring,resumption_id_2: bitstring,initiator_resume1_mic_1: bitstring));
    {86}let s1rk_1: key = kdf(shared_secret_1,(res_initiator_random_1,resumption_id_2),sigma1_resume) in
    {87}if aead_dec_validate(s1rk_1,initiator_resume1_mic_1,resume1mic_nonce,nil) then
    {88}new resumption_id_3: bitstring;
    {89}let s2rk_1: key = kdf(shared_secret_1,(res_initiator_random_1,resumption_id_3),sigma2_resume) in
    {90}let responder_resume2_mic_1: bitstring = aead_enc(s2rk_1,nil,resume2mic_nonce,nil) in
    {91}out(c, (resumption_id_3,responder_resume2_mic_1));
    {92}let resumption_keys_1: key = kdf(shared_secret_1,(res_initiator_random_1,resumption_id_3),sessionresumptionkeys) in
    {93}out(c, enc(resumption_keys_1,q_resumption_session_keys_r));
    {94}new dummy_1: bitstring;
    {95}event did_not_reach_end_responder(dummy_1)
) | (
    {96}!
    {97}phase 1;
    {98}out(c, seed_x)
) | (
    {99}!
    {100}phase 2;
    {101}out(c, seed_y)
)

-- Query inj-event(responder_end(noc,k,r)) ==> inj-event(start_session_with_responder(k,r)) && inj-event(accept_responder_identity(noc,k,r)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 197 rules (102 with conclusion selected). Queue: 71 rules.
400 rules inserted. Base: 373 rules (117 with conclusion selected). Queue: 192 rules.
600 rules inserted. Base: 502 rules (117 with conclusion selected). Queue: 383 rules.
800 rules inserted. Base: 606 rules (117 with conclusion selected). Queue: 389 rules.
1000 rules inserted. Base: 707 rules (117 with conclusion selected). Queue: 503 rules.
1200 rules inserted. Base: 806 rules (127 with conclusion selected). Queue: 540 rules.
1400 rules inserted. Base: 918 rules (127 with conclusion selected). Queue: 544 rules.
1600 rules inserted. Base: 1058 rules (137 with conclusion selected). Queue: 603 rules.
1800 rules inserted. Base: 1112 rules (137 with conclusion selected). Queue: 639 rules.
2000 rules inserted. Base: 1242 rules (137 with conclusion selected). Queue: 672 rules.
2200 rules inserted. Base: 1382 rules (137 with conclusion selected). Queue: 681 rules.
2400 rules inserted. Base: 1454 rules (137 with conclusion selected). Queue: 697 rules.
2600 rules inserted. Base: 1573 rules (137 with conclusion selected). Queue: 740 rules.
2800 rules inserted. Base: 1714 rules (144 with conclusion selected). Queue: 776 rules.
3000 rules inserted. Base: 1715 rules (144 with conclusion selected). Queue: 759 rules.
3200 rules inserted. Base: 1808 rules (144 with conclusion selected). Queue: 766 rules.
3400 rules inserted. Base: 1966 rules (151 with conclusion selected). Queue: 725 rules.
3600 rules inserted. Base: 1939 rules (151 with conclusion selected). Queue: 756 rules.
3800 rules inserted. Base: 1959 rules (151 with conclusion selected). Queue: 761 rules.
4000 rules inserted. Base: 2072 rules (151 with conclusion selected). Queue: 706 rules.
4200 rules inserted. Base: 2160 rules (152 with conclusion selected). Queue: 769 rules.
4400 rules inserted. Base: 2233 rules (152 with conclusion selected). Queue: 808 rules.
4600 rules inserted. Base: 2311 rules (152 with conclusion selected). Queue: 805 rules.
4800 rules inserted. Base: 2405 rules (153 with conclusion selected). Queue: 865 rules.
5000 rules inserted. Base: 2502 rules (156 with conclusion selected). Queue: 892 rules.
5200 rules inserted. Base: 2463 rules (156 with conclusion selected). Queue: 884 rules.
5400 rules inserted. Base: 2458 rules (156 with conclusion selected). Queue: 880 rules.
5600 rules inserted. Base: 2583 rules (159 with conclusion selected). Queue: 964 rules.
5800 rules inserted. Base: 2650 rules (159 with conclusion selected). Queue: 1016 rules.
6000 rules inserted. Base: 2718 rules (159 with conclusion selected). Queue: 1050 rules.
6200 rules inserted. Base: 2722 rules (159 with conclusion selected). Queue: 1013 rules.
6400 rules inserted. Base: 2816 rules (160 with conclusion selected). Queue: 1074 rules.
6600 rules inserted. Base: 2904 rules (161 with conclusion selected). Queue: 1115 rules.
6800 rules inserted. Base: 2964 rules (161 with conclusion selected). Queue: 1108 rules.
7000 rules inserted. Base: 2998 rules (161 with conclusion selected). Queue: 1074 rules.
7200 rules inserted. Base: 3007 rules (161 with conclusion selected). Queue: 1082 rules.
7400 rules inserted. Base: 3092 rules (161 with conclusion selected). Queue: 1098 rules.
7600 rules inserted. Base: 3193 rules (161 with conclusion selected). Queue: 1137 rules.
7800 rules inserted. Base: 3262 rules (162 with conclusion selected). Queue: 1134 rules.
8000 rules inserted. Base: 3114 rules (162 with conclusion selected). Queue: 1095 rules.
8200 rules inserted. Base: 3154 rules (162 with conclusion selected). Queue: 1070 rules.
8400 rules inserted. Base: 3229 rules (163 with conclusion selected). Queue: 1094 rules.
8600 rules inserted. Base: 3321 rules (163 with conclusion selected). Queue: 1089 rules.
8800 rules inserted. Base: 3372 rules (163 with conclusion selected). Queue: 1104 rules.
9000 rules inserted. Base: 3435 rules (163 with conclusion selected). Queue: 1079 rules.
9200 rules inserted. Base: 3466 rules (163 with conclusion selected). Queue: 1049 rules.
9400 rules inserted. Base: 3545 rules (165 with conclusion selected). Queue: 1065 rules.
9600 rules inserted. Base: 3619 rules (165 with conclusion selected). Queue: 1030 rules.
9800 rules inserted. Base: 3660 rules (166 with conclusion selected). Queue: 1051 rules.
10000 rules inserted. Base: 3692 rules (166 with conclusion selected). Queue: 1025 rules.
10200 rules inserted. Base: 3774 rules (166 with conclusion selected). Queue: 990 rules.
10400 rules inserted. Base: 3832 rules (166 with conclusion selected). Queue: 977 rules.
10600 rules inserted. Base: 3890 rules (166 with conclusion selected). Queue: 931 rules.
10800 rules inserted. Base: 3961 rules (166 with conclusion selected). Queue: 943 rules.
11000 rules inserted. Base: 4018 rules (166 with conclusion selected). Queue: 877 rules.
11200 rules inserted. Base: 4082 rules (166 with conclusion selected). Queue: 895 rules.
11400 rules inserted. Base: 4149 rules (166 with conclusion selected). Queue: 831 rules.
11600 rules inserted. Base: 4183 rules (167 with conclusion selected). Queue: 822 rules.
11800 rules inserted. Base: 4137 rules (167 with conclusion selected). Queue: 746 rules.
12000 rules inserted. Base: 4202 rules (169 with conclusion selected). Queue: 736 rules.
12200 rules inserted. Base: 4217 rules (169 with conclusion selected). Queue: 672 rules.
12400 rules inserted. Base: 4235 rules (169 with conclusion selected). Queue: 645 rules.
12600 rules inserted. Base: 4254 rules (169 with conclusion selected). Queue: 597 rules.
12800 rules inserted. Base: 4212 rules (169 with conclusion selected). Queue: 544 rules.
13000 rules inserted. Base: 4250 rules (169 with conclusion selected). Queue: 509 rules.
13200 rules inserted. Base: 4274 rules (169 with conclusion selected). Queue: 463 rules.
13400 rules inserted. Base: 4346 rules (169 with conclusion selected). Queue: 396 rules.
13600 rules inserted. Base: 4391 rules (169 with conclusion selected). Queue: 330 rules.
13800 rules inserted. Base: 4451 rules (169 with conclusion selected). Queue: 268 rules.
14000 rules inserted. Base: 4472 rules (170 with conclusion selected). Queue: 187 rules.
14200 rules inserted. Base: 4457 rules (171 with conclusion selected). Queue: 117 rules.
14400 rules inserted. Base: 4504 rules (171 with conclusion selected). Queue: 59 rules.
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_x[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_r[])
Starting query inj-event(responder_end(noc,k,r)) ==> inj-event(start_session_with_responder(k,r)) && inj-event(accept_responder_identity(noc,k,r))
goal reachable: b-inj-event(accept_responder_identity(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),responder_random_2),@occ26_1) && b-inj-event(start_session_with_responder(mul_point(P,hash((seed_y[],fresh_y_1))),responder_random_2),@occ21_1) -> inj-event(responder_end(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),responder_random_2),@occ78_1)
The 1st, 2nd hypotheses occur strictly before the conclusion.
Abbreviations:
responder_noc_key_2 = responder_noc_key[!1 = @sid]
fresh_x_1 = fresh_x[!1 = @sid_1]
initiator_random_2 = initiator_random[!1 = @sid_1]
fresh_y_1 = fresh_y[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid]
responder_random_2 = responder_random_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid]
resumption_id_4 = resumption_id_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid]
initiator_noc_key_2 = initiator_noc_key[!1 = @sid_1]
@occ78_1 = @occ78[msg3_1 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil),msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid]
@occ26_1 = @occ26[msg2 = (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)),!1 = @sid_1]
@occ21_1 = @occ21[msg2 = (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)),!1 = @sid_1]
RESULT inj-event(responder_end(noc,k,r)) ==> inj-event(start_session_with_responder(k,r)) && inj-event(accept_responder_identity(noc,k,r)) is true.
-- Query inj-event(initiator_end(noc,k,r)) ==> inj-event(start_session_with_initiator(k,r)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 197 rules (102 with conclusion selected). Queue: 72 rules.
400 rules inserted. Base: 381 rules (117 with conclusion selected). Queue: 190 rules.
600 rules inserted. Base: 506 rules (117 with conclusion selected). Queue: 380 rules.
800 rules inserted. Base: 612 rules (117 with conclusion selected). Queue: 399 rules.
1000 rules inserted. Base: 698 rules (117 with conclusion selected). Queue: 476 rules.
1200 rules inserted. Base: 805 rules (123 with conclusion selected). Queue: 535 rules.
1400 rules inserted. Base: 943 rules (123 with conclusion selected). Queue: 523 rules.
1600 rules inserted. Base: 1063 rules (134 with conclusion selected). Queue: 573 rules.
1800 rules inserted. Base: 1169 rules (134 with conclusion selected). Queue: 596 rules.
2000 rules inserted. Base: 1315 rules (134 with conclusion selected). Queue: 614 rules.
2200 rules inserted. Base: 1415 rules (134 with conclusion selected). Queue: 620 rules.
2400 rules inserted. Base: 1526 rules (134 with conclusion selected). Queue: 648 rules.
2600 rules inserted. Base: 1660 rules (134 with conclusion selected). Queue: 643 rules.
2800 rules inserted. Base: 1753 rules (140 with conclusion selected). Queue: 684 rules.
3000 rules inserted. Base: 1848 rules (140 with conclusion selected). Queue: 649 rules.
3200 rules inserted. Base: 1993 rules (146 with conclusion selected). Queue: 633 rules.
3400 rules inserted. Base: 2060 rules (146 with conclusion selected). Queue: 694 rules.
3600 rules inserted. Base: 2131 rules (146 with conclusion selected). Queue: 675 rules.
3800 rules inserted. Base: 2258 rules (146 with conclusion selected). Queue: 680 rules.
4000 rules inserted. Base: 2364 rules (146 with conclusion selected). Queue: 765 rules.
4200 rules inserted. Base: 2405 rules (146 with conclusion selected). Queue: 804 rules.
4400 rules inserted. Base: 2487 rules (147 with conclusion selected). Queue: 788 rules.
4600 rules inserted. Base: 2581 rules (150 with conclusion selected). Queue: 793 rules.
4800 rules inserted. Base: 2694 rules (150 with conclusion selected). Queue: 839 rules.
5000 rules inserted. Base: 2690 rules (150 with conclusion selected). Queue: 821 rules.
5200 rules inserted. Base: 2830 rules (153 with conclusion selected). Queue: 835 rules.
5400 rules inserted. Base: 2895 rules (153 with conclusion selected). Queue: 890 rules.
5600 rules inserted. Base: 2985 rules (153 with conclusion selected). Queue: 915 rules.
5800 rules inserted. Base: 3035 rules (155 with conclusion selected). Queue: 883 rules.
6000 rules inserted. Base: 3155 rules (155 with conclusion selected). Queue: 883 rules.
6200 rules inserted. Base: 3215 rules (154 with conclusion selected). Queue: 898 rules.
6400 rules inserted. Base: 3279 rules (154 with conclusion selected). Queue: 894 rules.
6600 rules inserted. Base: 3311 rules (154 with conclusion selected). Queue: 874 rules.
6800 rules inserted. Base: 3391 rules (154 with conclusion selected). Queue: 842 rules.
7000 rules inserted. Base: 3487 rules (155 with conclusion selected). Queue: 859 rules.
7200 rules inserted. Base: 3547 rules (155 with conclusion selected). Queue: 856 rules.
7400 rules inserted. Base: 3586 rules (155 with conclusion selected). Queue: 807 rules.
7600 rules inserted. Base: 3696 rules (156 with conclusion selected). Queue: 787 rules.
7800 rules inserted. Base: 3754 rules (156 with conclusion selected). Queue: 808 rules.
8000 rules inserted. Base: 3747 rules (156 with conclusion selected). Queue: 761 rules.
8200 rules inserted. Base: 3824 rules (157 with conclusion selected). Queue: 769 rules.
8400 rules inserted. Base: 3923 rules (157 with conclusion selected). Queue: 766 rules.
8600 rules inserted. Base: 3986 rules (158 with conclusion selected). Queue: 747 rules.
8800 rules inserted. Base: 4071 rules (158 with conclusion selected). Queue: 694 rules.
9000 rules inserted. Base: 4148 rules (158 with conclusion selected). Queue: 697 rules.
9200 rules inserted. Base: 4233 rules (158 with conclusion selected). Queue: 702 rules.
9400 rules inserted. Base: 4284 rules (158 with conclusion selected). Queue: 618 rules.
9600 rules inserted. Base: 4359 rules (158 with conclusion selected). Queue: 625 rules.
9800 rules inserted. Base: 4406 rules (159 with conclusion selected). Queue: 574 rules.
10000 rules inserted. Base: 4343 rules (159 with conclusion selected). Queue: 511 rules.
10200 rules inserted. Base: 4416 rules (161 with conclusion selected). Queue: 489 rules.
10400 rules inserted. Base: 4332 rules (161 with conclusion selected). Queue: 455 rules.
10600 rules inserted. Base: 4332 rules (161 with conclusion selected). Queue: 425 rules.
10800 rules inserted. Base: 4342 rules (161 with conclusion selected). Queue: 389 rules.
11000 rules inserted. Base: 4396 rules (161 with conclusion selected). Queue: 347 rules.
11200 rules inserted. Base: 4437 rules (161 with conclusion selected). Queue: 299 rules.
11400 rules inserted. Base: 4496 rules (161 with conclusion selected). Queue: 237 rules.
11600 rules inserted. Base: 4495 rules (162 with conclusion selected). Queue: 178 rules.
11800 rules inserted. Base: 4473 rules (163 with conclusion selected). Queue: 110 rules.
12000 rules inserted. Base: 4525 rules (164 with conclusion selected). Queue: 53 rules.
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_x[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_r[])
Starting query inj-event(initiator_end(noc,k,r)) ==> inj-event(start_session_with_initiator(k,r))
goal reachable: b-inj-event(start_session_with_initiator(mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),@occ59_1) -> inj-event(initiator_end(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),@occ32_1)
The hypothesis occurs strictly before the conclusion.
Abbreviations:
initiator_noc_key_2 = initiator_noc_key[!1 = @sid]
fresh_x_1 = fresh_x[!1 = @sid]
initiator_random_2 = initiator_random[!1 = @sid]
responder_random_2 = responder_random_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
fresh_y_1 = fresh_y[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
responder_noc_key_2 = responder_noc_key[!1 = @sid_1]
resumption_id_4 = resumption_id_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
@occ32_1 = @occ32[msg2 = (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)),!1 = @sid]
@occ59_1 = @occ59[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
RESULT inj-event(initiator_end(noc,k,r)) ==> inj-event(start_session_with_initiator(k,r)) is true.
-- Query not attacker_p2(q_id_i_i[]) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 197 rules (102 with conclusion selected). Queue: 69 rules.
400 rules inserted. Base: 383 rules (117 with conclusion selected). Queue: 185 rules.
600 rules inserted. Base: 502 rules (117 with conclusion selected). Queue: 364 rules.
800 rules inserted. Base: 615 rules (117 with conclusion selected). Queue: 400 rules.
1000 rules inserted. Base: 704 rules (117 with conclusion selected). Queue: 461 rules.
1200 rules inserted. Base: 774 rules (122 with conclusion selected). Queue: 537 rules.
1400 rules inserted. Base: 929 rules (132 with conclusion selected). Queue: 525 rules.
1600 rules inserted. Base: 984 rules (132 with conclusion selected). Queue: 559 rules.
1800 rules inserted. Base: 1102 rules (132 with conclusion selected). Queue: 572 rules.
2000 rules inserted. Base: 1235 rules (132 with conclusion selected). Queue: 613 rules.
2200 rules inserted. Base: 1292 rules (132 with conclusion selected). Queue: 619 rules.
2400 rules inserted. Base: 1424 rules (132 with conclusion selected). Queue: 655 rules.
2600 rules inserted. Base: 1547 rules (138 with conclusion selected). Queue: 694 rules.
2800 rules inserted. Base: 1544 rules (138 with conclusion selected). Queue: 680 rules.
3000 rules inserted. Base: 1669 rules (138 with conclusion selected). Queue: 652 rules.
3200 rules inserted. Base: 1796 rules (140 with conclusion selected). Queue: 677 rules.
3400 rules inserted. Base: 1712 rules (140 with conclusion selected). Queue: 687 rules.
3600 rules inserted. Base: 1786 rules (140 with conclusion selected). Queue: 643 rules.
3800 rules inserted. Base: 1893 rules (140 with conclusion selected). Queue: 656 rules.
4000 rules inserted. Base: 1959 rules (140 with conclusion selected). Queue: 688 rules.
4200 rules inserted. Base: 2027 rules (140 with conclusion selected). Queue: 652 rules.
4400 rules inserted. Base: 2096 rules (141 with conclusion selected). Queue: 673 rules.
4600 rules inserted. Base: 2224 rules (144 with conclusion selected). Queue: 765 rules.
4800 rules inserted. Base: 2122 rules (144 with conclusion selected). Queue: 714 rules.
5000 rules inserted. Base: 2210 rules (147 with conclusion selected). Queue: 749 rules.
5200 rules inserted. Base: 2284 rules (147 with conclusion selected). Queue: 884 rules.
5400 rules inserted. Base: 2299 rules (147 with conclusion selected). Queue: 877 rules.
5600 rules inserted. Base: 2369 rules (148 with conclusion selected). Queue: 904 rules.
5800 rules inserted. Base: 2470 rules (149 with conclusion selected). Queue: 932 rules.
6000 rules inserted. Base: 2541 rules (149 with conclusion selected). Queue: 1029 rules.
6200 rules inserted. Base: 2512 rules (149 with conclusion selected). Queue: 1010 rules.
6400 rules inserted. Base: 2551 rules (149 with conclusion selected). Queue: 1028 rules.
6600 rules inserted. Base: 2662 rules (149 with conclusion selected). Queue: 1057 rules.
6800 rules inserted. Base: 2707 rules (150 with conclusion selected). Queue: 1114 rules.
7000 rules inserted. Base: 2735 rules (150 with conclusion selected). Queue: 1134 rules.
7200 rules inserted. Base: 2536 rules (150 with conclusion selected). Queue: 1089 rules.
7400 rules inserted. Base: 2586 rules (150 with conclusion selected). Queue: 1103 rules.
7600 rules inserted. Base: 2658 rules (150 with conclusion selected). Queue: 1117 rules.
7800 rules inserted. Base: 2693 rules (150 with conclusion selected). Queue: 1166 rules.
8000 rules inserted. Base: 2742 rules (150 with conclusion selected). Queue: 1137 rules.
8200 rules inserted. Base: 2720 rules (150 with conclusion selected). Queue: 1123 rules.
8400 rules inserted. Base: 2779 rules (151 with conclusion selected). Queue: 1123 rules.
8600 rules inserted. Base: 2823 rules (151 with conclusion selected). Queue: 1104 rules.
8800 rules inserted. Base: 2888 rules (152 with conclusion selected). Queue: 1159 rules.
9000 rules inserted. Base: 2937 rules (152 with conclusion selected). Queue: 1124 rules.
9200 rules inserted. Base: 2972 rules (152 with conclusion selected). Queue: 1096 rules.
9400 rules inserted. Base: 3030 rules (152 with conclusion selected). Queue: 1076 rules.
9600 rules inserted. Base: 3062 rules (152 with conclusion selected). Queue: 1032 rules.
9800 rules inserted. Base: 3095 rules (152 with conclusion selected). Queue: 1044 rules.
10000 rules inserted. Base: 3132 rules (152 with conclusion selected). Queue: 1023 rules.
10200 rules inserted. Base: 3124 rules (152 with conclusion selected). Queue: 990 rules.
10400 rules inserted. Base: 3175 rules (152 with conclusion selected). Queue: 975 rules.
10600 rules inserted. Base: 3213 rules (152 with conclusion selected). Queue: 931 rules.
10800 rules inserted. Base: 3238 rules (153 with conclusion selected). Queue: 956 rules.
11000 rules inserted. Base: 3149 rules (153 with conclusion selected). Queue: 878 rules.
11200 rules inserted. Base: 3182 rules (154 with conclusion selected). Queue: 879 rules.
11400 rules inserted. Base: 3193 rules (154 with conclusion selected). Queue: 836 rules.
11600 rules inserted. Base: 3215 rules (154 with conclusion selected). Queue: 856 rules.
11800 rules inserted. Base: 3155 rules (154 with conclusion selected). Queue: 784 rules.
12000 rules inserted. Base: 3186 rules (154 with conclusion selected). Queue: 781 rules.
12200 rules inserted. Base: 3226 rules (154 with conclusion selected). Queue: 742 rules.
12400 rules inserted. Base: 3229 rules (154 with conclusion selected). Queue: 718 rules.
12600 rules inserted. Base: 3255 rules (154 with conclusion selected). Queue: 649 rules.
12800 rules inserted. Base: 3288 rules (154 with conclusion selected). Queue: 634 rules.
13000 rules inserted. Base: 3331 rules (154 with conclusion selected). Queue: 598 rules.
13200 rules inserted. Base: 3361 rules (154 with conclusion selected). Queue: 545 rules.
13400 rules inserted. Base: 3382 rules (154 with conclusion selected). Queue: 498 rules.
13600 rules inserted. Base: 3395 rules (154 with conclusion selected). Queue: 436 rules.
13800 rules inserted. Base: 3406 rules (154 with conclusion selected). Queue: 375 rules.
14000 rules inserted. Base: 3410 rules (154 with conclusion selected). Queue: 306 rules.
14200 rules inserted. Base: 3384 rules (154 with conclusion selected). Queue: 235 rules.
14400 rules inserted. Base: 3404 rules (155 with conclusion selected). Queue: 177 rules.
14600 rules inserted. Base: 3428 rules (155 with conclusion selected). Queue: 111 rules.
14800 rules inserted. Base: 3473 rules (155 with conclusion selected). Queue: 32 rules.
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_x[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_r[])
Starting query not attacker_p2(q_id_i_i[])
RESULT not attacker_p2(q_id_i_i[]) is true.
-- Query not attacker_p2(q_id_i_r[]) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 197 rules (102 with conclusion selected). Queue: 69 rules.
400 rules inserted. Base: 383 rules (117 with conclusion selected). Queue: 185 rules.
600 rules inserted. Base: 502 rules (117 with conclusion selected). Queue: 364 rules.
800 rules inserted. Base: 615 rules (117 with conclusion selected). Queue: 400 rules.
1000 rules inserted. Base: 704 rules (117 with conclusion selected). Queue: 461 rules.
1200 rules inserted. Base: 774 rules (122 with conclusion selected). Queue: 537 rules.
1400 rules inserted. Base: 929 rules (132 with conclusion selected). Queue: 525 rules.
1600 rules inserted. Base: 984 rules (132 with conclusion selected). Queue: 559 rules.
1800 rules inserted. Base: 1102 rules (132 with conclusion selected). Queue: 572 rules.
2000 rules inserted. Base: 1235 rules (132 with conclusion selected). Queue: 613 rules.
2200 rules inserted. Base: 1292 rules (132 with conclusion selected). Queue: 619 rules.
2400 rules inserted. Base: 1424 rules (132 with conclusion selected). Queue: 655 rules.
2600 rules inserted. Base: 1547 rules (138 with conclusion selected). Queue: 694 rules.
2800 rules inserted. Base: 1544 rules (138 with conclusion selected). Queue: 680 rules.
3000 rules inserted. Base: 1669 rules (138 with conclusion selected). Queue: 652 rules.
3200 rules inserted. Base: 1796 rules (140 with conclusion selected). Queue: 677 rules.
3400 rules inserted. Base: 1712 rules (140 with conclusion selected). Queue: 687 rules.
3600 rules inserted. Base: 1786 rules (140 with conclusion selected). Queue: 643 rules.
3800 rules inserted. Base: 1893 rules (140 with conclusion selected). Queue: 656 rules.
4000 rules inserted. Base: 1959 rules (140 with conclusion selected). Queue: 688 rules.
4200 rules inserted. Base: 2027 rules (140 with conclusion selected). Queue: 652 rules.
4400 rules inserted. Base: 2096 rules (141 with conclusion selected). Queue: 673 rules.
4600 rules inserted. Base: 2224 rules (144 with conclusion selected). Queue: 765 rules.
4800 rules inserted. Base: 2122 rules (144 with conclusion selected). Queue: 714 rules.
5000 rules inserted. Base: 2210 rules (147 with conclusion selected). Queue: 749 rules.
5200 rules inserted. Base: 2284 rules (147 with conclusion selected). Queue: 884 rules.
5400 rules inserted. Base: 2299 rules (147 with conclusion selected). Queue: 877 rules.
5600 rules inserted. Base: 2369 rules (148 with conclusion selected). Queue: 904 rules.
5800 rules inserted. Base: 2470 rules (149 with conclusion selected). Queue: 932 rules.
6000 rules inserted. Base: 2541 rules (149 with conclusion selected). Queue: 1029 rules.
6200 rules inserted. Base: 2512 rules (149 with conclusion selected). Queue: 1010 rules.
6400 rules inserted. Base: 2551 rules (149 with conclusion selected). Queue: 1028 rules.
6600 rules inserted. Base: 2662 rules (149 with conclusion selected). Queue: 1057 rules.
6800 rules inserted. Base: 2707 rules (150 with conclusion selected). Queue: 1114 rules.
7000 rules inserted. Base: 2735 rules (150 with conclusion selected). Queue: 1134 rules.
7200 rules inserted. Base: 2536 rules (150 with conclusion selected). Queue: 1089 rules.
7400 rules inserted. Base: 2586 rules (150 with conclusion selected). Queue: 1103 rules.
7600 rules inserted. Base: 2658 rules (150 with conclusion selected). Queue: 1117 rules.
7800 rules inserted. Base: 2693 rules (150 with conclusion selected). Queue: 1166 rules.
8000 rules inserted. Base: 2742 rules (150 with conclusion selected). Queue: 1137 rules.
8200 rules inserted. Base: 2720 rules (150 with conclusion selected). Queue: 1123 rules.
8400 rules inserted. Base: 2779 rules (151 with conclusion selected). Queue: 1123 rules.
8600 rules inserted. Base: 2823 rules (151 with conclusion selected). Queue: 1104 rules.
8800 rules inserted. Base: 2888 rules (152 with conclusion selected). Queue: 1159 rules.
9000 rules inserted. Base: 2937 rules (152 with conclusion selected). Queue: 1124 rules.
9200 rules inserted. Base: 2972 rules (152 with conclusion selected). Queue: 1096 rules.
9400 rules inserted. Base: 3030 rules (152 with conclusion selected). Queue: 1076 rules.
9600 rules inserted. Base: 3062 rules (152 with conclusion selected). Queue: 1032 rules.
9800 rules inserted. Base: 3095 rules (152 with conclusion selected). Queue: 1044 rules.
10000 rules inserted. Base: 3132 rules (152 with conclusion selected). Queue: 1023 rules.
10200 rules inserted. Base: 3124 rules (152 with conclusion selected). Queue: 990 rules.
10400 rules inserted. Base: 3175 rules (152 with conclusion selected). Queue: 975 rules.
10600 rules inserted. Base: 3213 rules (152 with conclusion selected). Queue: 931 rules.
10800 rules inserted. Base: 3238 rules (153 with conclusion selected). Queue: 956 rules.
11000 rules inserted. Base: 3149 rules (153 with conclusion selected). Queue: 878 rules.
11200 rules inserted. Base: 3182 rules (154 with conclusion selected). Queue: 879 rules.
11400 rules inserted. Base: 3193 rules (154 with conclusion selected). Queue: 836 rules.
11600 rules inserted. Base: 3215 rules (154 with conclusion selected). Queue: 856 rules.
11800 rules inserted. Base: 3155 rules (154 with conclusion selected). Queue: 784 rules.
12000 rules inserted. Base: 3186 rules (154 with conclusion selected). Queue: 781 rules.
12200 rules inserted. Base: 3226 rules (154 with conclusion selected). Queue: 742 rules.
12400 rules inserted. Base: 3229 rules (154 with conclusion selected). Queue: 718 rules.
12600 rules inserted. Base: 3255 rules (154 with conclusion selected). Queue: 649 rules.
12800 rules inserted. Base: 3288 rules (154 with conclusion selected). Queue: 634 rules.
13000 rules inserted. Base: 3331 rules (154 with conclusion selected). Queue: 598 rules.
13200 rules inserted. Base: 3361 rules (154 with conclusion selected). Queue: 545 rules.
13400 rules inserted. Base: 3382 rules (154 with conclusion selected). Queue: 498 rules.
13600 rules inserted. Base: 3395 rules (154 with conclusion selected). Queue: 436 rules.
13800 rules inserted. Base: 3406 rules (154 with conclusion selected). Queue: 375 rules.
14000 rules inserted. Base: 3410 rules (154 with conclusion selected). Queue: 306 rules.
14200 rules inserted. Base: 3384 rules (154 with conclusion selected). Queue: 235 rules.
14400 rules inserted. Base: 3404 rules (155 with conclusion selected). Queue: 177 rules.
14600 rules inserted. Base: 3428 rules (155 with conclusion selected). Queue: 111 rules.
14800 rules inserted. Base: 3473 rules (155 with conclusion selected). Queue: 32 rules.
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_x[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_r[])
Starting query not attacker_p2(q_id_i_r[])
RESULT not attacker_p2(q_id_i_r[]) is true.
-- Query not attacker_p2(q_id_r_i[]) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 197 rules (102 with conclusion selected). Queue: 69 rules.
400 rules inserted. Base: 383 rules (117 with conclusion selected). Queue: 185 rules.
600 rules inserted. Base: 502 rules (117 with conclusion selected). Queue: 364 rules.
800 rules inserted. Base: 615 rules (117 with conclusion selected). Queue: 400 rules.
1000 rules inserted. Base: 704 rules (117 with conclusion selected). Queue: 461 rules.
1200 rules inserted. Base: 774 rules (122 with conclusion selected). Queue: 537 rules.
1400 rules inserted. Base: 929 rules (132 with conclusion selected). Queue: 525 rules.
1600 rules inserted. Base: 984 rules (132 with conclusion selected). Queue: 559 rules.
1800 rules inserted. Base: 1102 rules (132 with conclusion selected). Queue: 572 rules.
2000 rules inserted. Base: 1235 rules (132 with conclusion selected). Queue: 613 rules.
2200 rules inserted. Base: 1292 rules (132 with conclusion selected). Queue: 619 rules.
2400 rules inserted. Base: 1424 rules (132 with conclusion selected). Queue: 655 rules.
2600 rules inserted. Base: 1547 rules (138 with conclusion selected). Queue: 694 rules.
2800 rules inserted. Base: 1544 rules (138 with conclusion selected). Queue: 680 rules.
3000 rules inserted. Base: 1669 rules (138 with conclusion selected). Queue: 652 rules.
3200 rules inserted. Base: 1796 rules (140 with conclusion selected). Queue: 677 rules.
3400 rules inserted. Base: 1712 rules (140 with conclusion selected). Queue: 687 rules.
3600 rules inserted. Base: 1786 rules (140 with conclusion selected). Queue: 643 rules.
3800 rules inserted. Base: 1893 rules (140 with conclusion selected). Queue: 656 rules.
4000 rules inserted. Base: 1959 rules (140 with conclusion selected). Queue: 688 rules.
4200 rules inserted. Base: 2027 rules (140 with conclusion selected). Queue: 652 rules.
4400 rules inserted. Base: 2096 rules (141 with conclusion selected). Queue: 673 rules.
4600 rules inserted. Base: 2224 rules (144 with conclusion selected). Queue: 765 rules.
4800 rules inserted. Base: 2122 rules (144 with conclusion selected). Queue: 714 rules.
5000 rules inserted. Base: 2210 rules (147 with conclusion selected). Queue: 749 rules.
5200 rules inserted. Base: 2284 rules (147 with conclusion selected). Queue: 884 rules.
5400 rules inserted. Base: 2299 rules (147 with conclusion selected). Queue: 877 rules.
5600 rules inserted. Base: 2369 rules (148 with conclusion selected). Queue: 904 rules.
5800 rules inserted. Base: 2470 rules (149 with conclusion selected). Queue: 932 rules.
6000 rules inserted. Base: 2541 rules (149 with conclusion selected). Queue: 1029 rules.
6200 rules inserted. Base: 2512 rules (149 with conclusion selected). Queue: 1010 rules.
6400 rules inserted. Base: 2551 rules (149 with conclusion selected). Queue: 1028 rules.
6600 rules inserted. Base: 2662 rules (149 with conclusion selected). Queue: 1057 rules.
6800 rules inserted. Base: 2707 rules (150 with conclusion selected). Queue: 1114 rules.
7000 rules inserted. Base: 2735 rules (150 with conclusion selected). Queue: 1134 rules.
7200 rules inserted. Base: 2536 rules (150 with conclusion selected). Queue: 1089 rules.
7400 rules inserted. Base: 2586 rules (150 with conclusion selected). Queue: 1103 rules.
7600 rules inserted. Base: 2658 rules (150 with conclusion selected). Queue: 1117 rules.
7800 rules inserted. Base: 2693 rules (150 with conclusion selected). Queue: 1166 rules.
8000 rules inserted. Base: 2742 rules (150 with conclusion selected). Queue: 1137 rules.
8200 rules inserted. Base: 2720 rules (150 with conclusion selected). Queue: 1123 rules.
8400 rules inserted. Base: 2779 rules (151 with conclusion selected). Queue: 1123 rules.
8600 rules inserted. Base: 2823 rules (151 with conclusion selected). Queue: 1104 rules.
8800 rules inserted. Base: 2888 rules (152 with conclusion selected). Queue: 1159 rules.
9000 rules inserted. Base: 2937 rules (152 with conclusion selected). Queue: 1124 rules.
9200 rules inserted. Base: 2972 rules (152 with conclusion selected). Queue: 1096 rules.
9400 rules inserted. Base: 3030 rules (152 with conclusion selected). Queue: 1076 rules.
9600 rules inserted. Base: 3062 rules (152 with conclusion selected). Queue: 1032 rules.
9800 rules inserted. Base: 3095 rules (152 with conclusion selected). Queue: 1044 rules.
10000 rules inserted. Base: 3132 rules (152 with conclusion selected). Queue: 1023 rules.
10200 rules inserted. Base: 3124 rules (152 with conclusion selected). Queue: 990 rules.
10400 rules inserted. Base: 3175 rules (152 with conclusion selected). Queue: 975 rules.
10600 rules inserted. Base: 3213 rules (152 with conclusion selected). Queue: 931 rules.
10800 rules inserted. Base: 3238 rules (153 with conclusion selected). Queue: 956 rules.
11000 rules inserted. Base: 3149 rules (153 with conclusion selected). Queue: 878 rules.
11200 rules inserted. Base: 3182 rules (154 with conclusion selected). Queue: 879 rules.
11400 rules inserted. Base: 3193 rules (154 with conclusion selected). Queue: 836 rules.
11600 rules inserted. Base: 3215 rules (154 with conclusion selected). Queue: 856 rules.
11800 rules inserted. Base: 3155 rules (154 with conclusion selected). Queue: 784 rules.
12000 rules inserted. Base: 3186 rules (154 with conclusion selected). Queue: 781 rules.
12200 rules inserted. Base: 3226 rules (154 with conclusion selected). Queue: 742 rules.
12400 rules inserted. Base: 3229 rules (154 with conclusion selected). Queue: 718 rules.
12600 rules inserted. Base: 3255 rules (154 with conclusion selected). Queue: 649 rules.
12800 rules inserted. Base: 3288 rules (154 with conclusion selected). Queue: 634 rules.
13000 rules inserted. Base: 3331 rules (154 with conclusion selected). Queue: 598 rules.
13200 rules inserted. Base: 3361 rules (154 with conclusion selected). Queue: 545 rules.
13400 rules inserted. Base: 3382 rules (154 with conclusion selected). Queue: 498 rules.
13600 rules inserted. Base: 3395 rules (154 with conclusion selected). Queue: 436 rules.
13800 rules inserted. Base: 3406 rules (154 with conclusion selected). Queue: 375 rules.
14000 rules inserted. Base: 3410 rules (154 with conclusion selected). Queue: 306 rules.
14200 rules inserted. Base: 3384 rules (154 with conclusion selected). Queue: 235 rules.
14400 rules inserted. Base: 3404 rules (155 with conclusion selected). Queue: 177 rules.
14600 rules inserted. Base: 3428 rules (155 with conclusion selected). Queue: 111 rules.
14800 rules inserted. Base: 3473 rules (155 with conclusion selected). Queue: 32 rules.
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_x[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_r[])
Starting query not attacker_p2(q_id_r_i[])
RESULT not attacker_p2(q_id_r_i[]) is true.
-- Query not attacker_p2(q_id_r_r[]) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 197 rules (102 with conclusion selected). Queue: 69 rules.
400 rules inserted. Base: 383 rules (117 with conclusion selected). Queue: 185 rules.
600 rules inserted. Base: 502 rules (117 with conclusion selected). Queue: 364 rules.
800 rules inserted. Base: 615 rules (117 with conclusion selected). Queue: 400 rules.
1000 rules inserted. Base: 704 rules (117 with conclusion selected). Queue: 461 rules.
1200 rules inserted. Base: 774 rules (122 with conclusion selected). Queue: 537 rules.
1400 rules inserted. Base: 929 rules (132 with conclusion selected). Queue: 525 rules.
1600 rules inserted. Base: 984 rules (132 with conclusion selected). Queue: 559 rules.
1800 rules inserted. Base: 1102 rules (132 with conclusion selected). Queue: 572 rules.
2000 rules inserted. Base: 1235 rules (132 with conclusion selected). Queue: 613 rules.
2200 rules inserted. Base: 1292 rules (132 with conclusion selected). Queue: 619 rules.
2400 rules inserted. Base: 1424 rules (132 with conclusion selected). Queue: 655 rules.
2600 rules inserted. Base: 1547 rules (138 with conclusion selected). Queue: 694 rules.
2800 rules inserted. Base: 1544 rules (138 with conclusion selected). Queue: 680 rules.
3000 rules inserted. Base: 1669 rules (138 with conclusion selected). Queue: 652 rules.
3200 rules inserted. Base: 1796 rules (140 with conclusion selected). Queue: 677 rules.
3400 rules inserted. Base: 1712 rules (140 with conclusion selected). Queue: 687 rules.
3600 rules inserted. Base: 1786 rules (140 with conclusion selected). Queue: 643 rules.
3800 rules inserted. Base: 1893 rules (140 with conclusion selected). Queue: 656 rules.
4000 rules inserted. Base: 1959 rules (140 with conclusion selected). Queue: 688 rules.
4200 rules inserted. Base: 2027 rules (140 with conclusion selected). Queue: 652 rules.
4400 rules inserted. Base: 2096 rules (141 with conclusion selected). Queue: 673 rules.
4600 rules inserted. Base: 2224 rules (144 with conclusion selected). Queue: 765 rules.
4800 rules inserted. Base: 2122 rules (144 with conclusion selected). Queue: 714 rules.
5000 rules inserted. Base: 2210 rules (147 with conclusion selected). Queue: 749 rules.
5200 rules inserted. Base: 2284 rules (147 with conclusion selected). Queue: 884 rules.
5400 rules inserted. Base: 2299 rules (147 with conclusion selected). Queue: 877 rules.
5600 rules inserted. Base: 2369 rules (148 with conclusion selected). Queue: 904 rules.
5800 rules inserted. Base: 2470 rules (149 with conclusion selected). Queue: 932 rules.
6000 rules inserted. Base: 2541 rules (149 with conclusion selected). Queue: 1029 rules.
6200 rules inserted. Base: 2512 rules (149 with conclusion selected). Queue: 1010 rules.
6400 rules inserted. Base: 2551 rules (149 with conclusion selected). Queue: 1028 rules.
6600 rules inserted. Base: 2662 rules (149 with conclusion selected). Queue: 1057 rules.
6800 rules inserted. Base: 2707 rules (150 with conclusion selected). Queue: 1114 rules.
7000 rules inserted. Base: 2735 rules (150 with conclusion selected). Queue: 1134 rules.
7200 rules inserted. Base: 2536 rules (150 with conclusion selected). Queue: 1089 rules.
7400 rules inserted. Base: 2586 rules (150 with conclusion selected). Queue: 1103 rules.
7600 rules inserted. Base: 2658 rules (150 with conclusion selected). Queue: 1117 rules.
7800 rules inserted. Base: 2693 rules (150 with conclusion selected). Queue: 1166 rules.
8000 rules inserted. Base: 2742 rules (150 with conclusion selected). Queue: 1137 rules.
8200 rules inserted. Base: 2720 rules (150 with conclusion selected). Queue: 1123 rules.
8400 rules inserted. Base: 2779 rules (151 with conclusion selected). Queue: 1123 rules.
8600 rules inserted. Base: 2823 rules (151 with conclusion selected). Queue: 1104 rules.
8800 rules inserted. Base: 2888 rules (152 with conclusion selected). Queue: 1159 rules.
9000 rules inserted. Base: 2937 rules (152 with conclusion selected). Queue: 1124 rules.
9200 rules inserted. Base: 2972 rules (152 with conclusion selected). Queue: 1096 rules.
9400 rules inserted. Base: 3030 rules (152 with conclusion selected). Queue: 1076 rules.
9600 rules inserted. Base: 3062 rules (152 with conclusion selected). Queue: 1032 rules.
9800 rules inserted. Base: 3095 rules (152 with conclusion selected). Queue: 1044 rules.
10000 rules inserted. Base: 3132 rules (152 with conclusion selected). Queue: 1023 rules.
10200 rules inserted. Base: 3124 rules (152 with conclusion selected). Queue: 990 rules.
10400 rules inserted. Base: 3175 rules (152 with conclusion selected). Queue: 975 rules.
10600 rules inserted. Base: 3213 rules (152 with conclusion selected). Queue: 931 rules.
10800 rules inserted. Base: 3238 rules (153 with conclusion selected). Queue: 956 rules.
11000 rules inserted. Base: 3149 rules (153 with conclusion selected). Queue: 878 rules.
11200 rules inserted. Base: 3182 rules (154 with conclusion selected). Queue: 879 rules.
11400 rules inserted. Base: 3193 rules (154 with conclusion selected). Queue: 836 rules.
11600 rules inserted. Base: 3215 rules (154 with conclusion selected). Queue: 856 rules.
11800 rules inserted. Base: 3155 rules (154 with conclusion selected). Queue: 784 rules.
12000 rules inserted. Base: 3186 rules (154 with conclusion selected). Queue: 781 rules.
12200 rules inserted. Base: 3226 rules (154 with conclusion selected). Queue: 742 rules.
12400 rules inserted. Base: 3229 rules (154 with conclusion selected). Queue: 718 rules.
12600 rules inserted. Base: 3255 rules (154 with conclusion selected). Queue: 649 rules.
12800 rules inserted. Base: 3288 rules (154 with conclusion selected). Queue: 634 rules.
13000 rules inserted. Base: 3331 rules (154 with conclusion selected). Queue: 598 rules.
13200 rules inserted. Base: 3361 rules (154 with conclusion selected). Queue: 545 rules.
13400 rules inserted. Base: 3382 rules (154 with conclusion selected). Queue: 498 rules.
13600 rules inserted. Base: 3395 rules (154 with conclusion selected). Queue: 436 rules.
13800 rules inserted. Base: 3406 rules (154 with conclusion selected). Queue: 375 rules.
14000 rules inserted. Base: 3410 rules (154 with conclusion selected). Queue: 306 rules.
14200 rules inserted. Base: 3384 rules (154 with conclusion selected). Queue: 235 rules.
14400 rules inserted. Base: 3404 rules (155 with conclusion selected). Queue: 177 rules.
14600 rules inserted. Base: 3428 rules (155 with conclusion selected). Queue: 111 rules.
14800 rules inserted. Base: 3473 rules (155 with conclusion selected). Queue: 32 rules.
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_x[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_r[])
Starting query not attacker_p2(q_id_r_r[])
RESULT not attacker_p2(q_id_r_r[]) is true.
-- Query not attacker_p2(q_eph_x[]) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 197 rules (102 with conclusion selected). Queue: 69 rules.
400 rules inserted. Base: 383 rules (117 with conclusion selected). Queue: 185 rules.
600 rules inserted. Base: 502 rules (117 with conclusion selected). Queue: 364 rules.
800 rules inserted. Base: 615 rules (117 with conclusion selected). Queue: 400 rules.
1000 rules inserted. Base: 704 rules (117 with conclusion selected). Queue: 461 rules.
1200 rules inserted. Base: 774 rules (122 with conclusion selected). Queue: 537 rules.
1400 rules inserted. Base: 929 rules (132 with conclusion selected). Queue: 525 rules.
1600 rules inserted. Base: 984 rules (132 with conclusion selected). Queue: 559 rules.
1800 rules inserted. Base: 1102 rules (132 with conclusion selected). Queue: 572 rules.
2000 rules inserted. Base: 1235 rules (132 with conclusion selected). Queue: 613 rules.
2200 rules inserted. Base: 1292 rules (132 with conclusion selected). Queue: 619 rules.
2400 rules inserted. Base: 1424 rules (132 with conclusion selected). Queue: 655 rules.
2600 rules inserted. Base: 1547 rules (138 with conclusion selected). Queue: 694 rules.
2800 rules inserted. Base: 1544 rules (138 with conclusion selected). Queue: 680 rules.
3000 rules inserted. Base: 1669 rules (138 with conclusion selected). Queue: 652 rules.
3200 rules inserted. Base: 1796 rules (140 with conclusion selected). Queue: 677 rules.
3400 rules inserted. Base: 1712 rules (140 with conclusion selected). Queue: 687 rules.
3600 rules inserted. Base: 1786 rules (140 with conclusion selected). Queue: 643 rules.
3800 rules inserted. Base: 1893 rules (140 with conclusion selected). Queue: 656 rules.
4000 rules inserted. Base: 1959 rules (140 with conclusion selected). Queue: 688 rules.
4200 rules inserted. Base: 2027 rules (140 with conclusion selected). Queue: 652 rules.
4400 rules inserted. Base: 2096 rules (141 with conclusion selected). Queue: 673 rules.
4600 rules inserted. Base: 2224 rules (144 with conclusion selected). Queue: 765 rules.
4800 rules inserted. Base: 2122 rules (144 with conclusion selected). Queue: 714 rules.
5000 rules inserted. Base: 2210 rules (147 with conclusion selected). Queue: 749 rules.
5200 rules inserted. Base: 2284 rules (147 with conclusion selected). Queue: 884 rules.
5400 rules inserted. Base: 2299 rules (147 with conclusion selected). Queue: 877 rules.
5600 rules inserted. Base: 2369 rules (148 with conclusion selected). Queue: 904 rules.
5800 rules inserted. Base: 2470 rules (149 with conclusion selected). Queue: 932 rules.
6000 rules inserted. Base: 2541 rules (149 with conclusion selected). Queue: 1029 rules.
6200 rules inserted. Base: 2512 rules (149 with conclusion selected). Queue: 1010 rules.
6400 rules inserted. Base: 2551 rules (149 with conclusion selected). Queue: 1028 rules.
6600 rules inserted. Base: 2662 rules (149 with conclusion selected). Queue: 1057 rules.
6800 rules inserted. Base: 2707 rules (150 with conclusion selected). Queue: 1114 rules.
7000 rules inserted. Base: 2735 rules (150 with conclusion selected). Queue: 1134 rules.
7200 rules inserted. Base: 2536 rules (150 with conclusion selected). Queue: 1089 rules.
7400 rules inserted. Base: 2586 rules (150 with conclusion selected). Queue: 1103 rules.
7600 rules inserted. Base: 2658 rules (150 with conclusion selected). Queue: 1117 rules.
7800 rules inserted. Base: 2693 rules (150 with conclusion selected). Queue: 1166 rules.
8000 rules inserted. Base: 2742 rules (150 with conclusion selected). Queue: 1137 rules.
8200 rules inserted. Base: 2720 rules (150 with conclusion selected). Queue: 1123 rules.
8400 rules inserted. Base: 2779 rules (151 with conclusion selected). Queue: 1123 rules.
8600 rules inserted. Base: 2823 rules (151 with conclusion selected). Queue: 1104 rules.
8800 rules inserted. Base: 2888 rules (152 with conclusion selected). Queue: 1159 rules.
9000 rules inserted. Base: 2937 rules (152 with conclusion selected). Queue: 1124 rules.
9200 rules inserted. Base: 2972 rules (152 with conclusion selected). Queue: 1096 rules.
9400 rules inserted. Base: 3030 rules (152 with conclusion selected). Queue: 1076 rules.
9600 rules inserted. Base: 3062 rules (152 with conclusion selected). Queue: 1032 rules.
9800 rules inserted. Base: 3095 rules (152 with conclusion selected). Queue: 1044 rules.
10000 rules inserted. Base: 3132 rules (152 with conclusion selected). Queue: 1023 rules.
10200 rules inserted. Base: 3124 rules (152 with conclusion selected). Queue: 990 rules.
10400 rules inserted. Base: 3175 rules (152 with conclusion selected). Queue: 975 rules.
10600 rules inserted. Base: 3213 rules (152 with conclusion selected). Queue: 931 rules.
10800 rules inserted. Base: 3238 rules (153 with conclusion selected). Queue: 956 rules.
11000 rules inserted. Base: 3149 rules (153 with conclusion selected). Queue: 878 rules.
11200 rules inserted. Base: 3182 rules (154 with conclusion selected). Queue: 879 rules.
11400 rules inserted. Base: 3193 rules (154 with conclusion selected). Queue: 836 rules.
11600 rules inserted. Base: 3215 rules (154 with conclusion selected). Queue: 856 rules.
11800 rules inserted. Base: 3155 rules (154 with conclusion selected). Queue: 784 rules.
12000 rules inserted. Base: 3186 rules (154 with conclusion selected). Queue: 781 rules.
12200 rules inserted. Base: 3226 rules (154 with conclusion selected). Queue: 742 rules.
12400 rules inserted. Base: 3229 rules (154 with conclusion selected). Queue: 718 rules.
12600 rules inserted. Base: 3255 rules (154 with conclusion selected). Queue: 649 rules.
12800 rules inserted. Base: 3288 rules (154 with conclusion selected). Queue: 634 rules.
13000 rules inserted. Base: 3331 rules (154 with conclusion selected). Queue: 598 rules.
13200 rules inserted. Base: 3361 rules (154 with conclusion selected). Queue: 545 rules.
13400 rules inserted. Base: 3382 rules (154 with conclusion selected). Queue: 498 rules.
13600 rules inserted. Base: 3395 rules (154 with conclusion selected). Queue: 436 rules.
13800 rules inserted. Base: 3406 rules (154 with conclusion selected). Queue: 375 rules.
14000 rules inserted. Base: 3410 rules (154 with conclusion selected). Queue: 306 rules.
14200 rules inserted. Base: 3384 rules (154 with conclusion selected). Queue: 235 rules.
14400 rules inserted. Base: 3404 rules (155 with conclusion selected). Queue: 177 rules.
14600 rules inserted. Base: 3428 rules (155 with conclusion selected). Queue: 111 rules.
14800 rules inserted. Base: 3473 rules (155 with conclusion selected). Queue: 32 rules.
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_x[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_r[])
Starting query not attacker_p2(q_eph_x[])
goal reachable: attacker_p2(q_eph_x[])

Derivation:
Abbreviations:
fresh_x_1 = fresh_x[!1 = @sid]
initiator_random_2 = initiator_random[!1 = @sid]
responder_random_2 = responder_random_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
fresh_y_1 = fresh_y[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
responder_noc_key_2 = responder_noc_key[!1 = @sid_1]
resumption_id_4 = resumption_id_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
responder_random_3 = responder_random_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_2]
fresh_y_2 = fresh_y[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_2]
responder_noc_key_3 = responder_noc_key[!1 = @sid_2]
resumption_id_5 = resumption_id_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_2]

1. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) may be sent to the attacker at output {18}.
attacker((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2)).

2. By 1, the attacker may know (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2).
Using the function 2-proj-2-tuple the attacker may obtain initiator_random_2.
attacker(initiator_random_2).

3. By 1, the attacker may know (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2).
Using the function 1-proj-2-tuple the attacker may obtain mul_point(P,hash((seed_x[],fresh_x_1))).
attacker(mul_point(P,hash((seed_x[],fresh_x_1)))).

4. By 3, the attacker may know mul_point(P,hash((seed_x[],fresh_x_1))).
By 2, the attacker may know initiator_random_2.
Using the function 2-tuple the attacker may obtain (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2).
attacker((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2)).

5. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
So the message (responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_5),ncase_sigma2n,nil)) may be sent to the attacker at output {70}.
attacker((responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_5),ncase_sigma2n,nil))).

6. By 5, the attacker may know (responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_5),ncase_sigma2n,nil)).
Using the function 3-proj-3-tuple the attacker may obtain aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_5),ncase_sigma2n,nil).
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_5),ncase_sigma2n,nil)).

7. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
So the message (responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_2))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_5),ncase_sigma2n,nil)) may be sent to the attacker at output {70}.
attacker((responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_2))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_5),ncase_sigma2n,nil))).

8. By 7, the attacker may know (responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_2))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_5),ncase_sigma2n,nil)).
Using the function 2-proj-3-tuple the attacker may obtain mul_point(P,hash((seed_y[],fresh_y_2))).
attacker(mul_point(P,hash((seed_y[],fresh_y_2)))).

9. By 7, the attacker may know (responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_2))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_5),ncase_sigma2n,nil)).
Using the function 1-proj-3-tuple the attacker may obtain responder_random_3.
attacker(responder_random_3).

10. By 9, the attacker may know responder_random_3.
By 8, the attacker may know mul_point(P,hash((seed_y[],fresh_y_2))).
By 6, the attacker may know aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_5),ncase_sigma2n,nil).
Using the function 3-tuple the attacker may obtain (responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_5),ncase_sigma2n,nil)).
attacker((responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_5),ncase_sigma2n,nil))).

11. The message (responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_5),ncase_sigma2n,nil)) that the attacker may have by 10 may be received at input {19}.
So the message enc(hash((seed_x[],fresh_x_1)),q_eph_x[]) may be sent to the attacker at output {36}.
attacker(enc(hash((seed_x[],fresh_x_1)),q_eph_x[])).

12. By 11, the attacker may know enc(hash((seed_x[],fresh_x_1)),q_eph_x[]).
So the attacker may know enc(hash((seed_x[],fresh_x_1)),q_eph_x[]) in phase 1.
attacker_p1(enc(hash((seed_x[],fresh_x_1)),q_eph_x[])).

13. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
So the message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) may be sent to the attacker at output {70}.
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

14. By 13, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 3-proj-3-tuple the attacker may obtain aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil).
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).

15. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
So the message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) may be sent to the attacker at output {70}.
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

16. By 15, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 2-proj-3-tuple the attacker may obtain mul_point(P,hash((seed_y[],fresh_y_1))).
attacker(mul_point(P,hash((seed_y[],fresh_y_1)))).

17. By 15, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 1-proj-3-tuple the attacker may obtain responder_random_2.
attacker(responder_random_2).

18. By 17, the attacker may know responder_random_2.
By 16, the attacker may know mul_point(P,hash((seed_y[],fresh_y_1))).
By 14, the attacker may know aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil).
Using the function 3-tuple the attacker may obtain (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

19. The message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) that the attacker may have by 18 may be received at input {19}.
So the message fresh_x_1 may be sent to the attacker at output {35}.
attacker(fresh_x_1).

20. By 19, the attacker may know fresh_x_1.
So the attacker may know fresh_x_1 in phase 1.
attacker_p1(fresh_x_1).

21. The message seed_x[] may be sent to the attacker in phase 1 at output {98}.
attacker_p1(seed_x[]).

22. By 21, the attacker may know seed_x[] in phase 1.
By 20, the attacker may know fresh_x_1 in phase 1.
Using the function 2-tuple the attacker may obtain (seed_x[],fresh_x_1) in phase 1.
attacker_p1((seed_x[],fresh_x_1)).

23. By 22, the attacker may know (seed_x[],fresh_x_1) in phase 1.
Using the function hash the attacker may obtain hash((seed_x[],fresh_x_1)) in phase 1.
attacker_p1(hash((seed_x[],fresh_x_1))).

24. By 23, the attacker may know hash((seed_x[],fresh_x_1)) in phase 1.
By 12, the attacker may know enc(hash((seed_x[],fresh_x_1)),q_eph_x[]) in phase 1.
Using the function dec the attacker may obtain q_eph_x[] in phase 1.
attacker_p1(q_eph_x[]).

25. By 24, the attacker may know q_eph_x[] in phase 1.
So the attacker may know q_eph_x[] in phase 2.
attacker_p2(q_eph_x[]).

26. By 25, attacker_p2(q_eph_x[]).
The goal is reached, represented in the following fact:
attacker_p2(q_eph_x[]).


Unified @sid_2 with @sid_1
The clause after UnifyDerivationPrecise is
attacker_p2(q_eph_x[])
This clause still contradicts the query.
A more detailed output of the traces is available with
  set traceDisplay = long.

new ipk: key creating ipk_3 at {1}

new seed_x: bitstring creating seed_x_2 at {2}

new seed_y: bitstring creating seed_y_2 at {3}

out(c, ~M) with ~M = mul_point(P,noc_signing_key) at {5}

new responder_noc_key: key creating responder_noc_key_4 at {51} in copy a

new initiator_noc_key: key creating initiator_noc_key_2 at {7} in copy a_1

new fresh_x: bitstring creating fresh_x_2 at {13} in copy a_1

new initiator_random: bitstring creating initiator_random_3 at {15} in copy a_1

out(c, (~M_1,~M_2)) with ~M_1 = mul_point(P,hash((seed_x_2,fresh_x_2))), ~M_2 = initiator_random_3 at {18} in copy a_1

in(c, (~M_1,~M_2)) with ~M_1 = mul_point(P,hash((seed_x_2,fresh_x_2))), ~M_2 = initiator_random_3 at {57} in copy a

event start_session_with_initiator(mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3) at {59} in copy a

new fresh_y: bitstring creating fresh_y_3 at {60} in copy a

new responder_random_1: bitstring creating responder_random_4 at {62} in copy a

new resumption_id_1: bitstring creating resumption_id_6 at {63} in copy a

out(c, (~M_3,~M_4,~M_5)) with ~M_3 = responder_random_4, ~M_4 = mul_point(P,hash((seed_y_2,fresh_y_3))), ~M_5 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(ipk_3,responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_4),sign(noc_signing_key,mul_point(P,responder_noc_key_4)),sign(responder_noc_key_4,(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_6),ncase_sigma2n,nil) at {70} in copy a

in(c, (~M_3,~M_4,~M_5)) with ~M_3 = responder_random_4, ~M_4 = mul_point(P,hash((seed_y_2,fresh_y_3))), ~M_5 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_3))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_4),sign(noc_signing_key,mul_point(P,responder_noc_key_4)),sign(responder_noc_key_4,(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_6),ncase_sigma2n,nil) at {19} in copy a_1

event start_session_with_responder(mul_point(P,hash((seed_y_2,fresh_y_3))),responder_random_4) at {21} in copy a_1

event accept_responder_identity(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),responder_random_4) at {26} in copy a_1

out(c, ~M_6) with ~M_6 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_3))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_3))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_4),sign(noc_signing_key,mul_point(P,responder_noc_key_4)),sign(responder_noc_key_4,(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_6),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key,mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_3)))))),ncase_sigma3n,nil) at {30} in copy a_1

event initiator_end(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3) at {32} in copy a_1

out(c, ~M_7) with ~M_7 = enc(mul_point(P,initiator_noc_key_2),q_id_i_i) at {33} in copy a_1

out(c, ~M_8) with ~M_8 = enc(mul_point(P,responder_noc_key_4),q_id_r_i) at {34} in copy a_1

out(c, ~M_9) with ~M_9 = fresh_x_2 at {35} in copy a_1

out(c, ~M_10) with ~M_10 = enc(hash((seed_x_2,fresh_x_2)),q_eph_x) at {36} in copy a_1

out(c, ~M_11) with ~M_11 = enc(mul_point(mul_point(P,hash((seed_y_2,fresh_y_3))),hash((seed_x_2,fresh_x_2))),q_shared_secret_i) at {37} in copy a_1

out(c, ~M_12) with ~M_12 = enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_3))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_3))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_4),sign(noc_signing_key,mul_point(P,responder_noc_key_4)),sign(responder_noc_key_4,(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_6),ncase_sigma2n,nil)),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_3))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_3))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_4),sign(noc_signing_key,mul_point(P,responder_noc_key_4)),sign(responder_noc_key_4,(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_6),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key,mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_3)))))),ncase_sigma3n,nil)))),sekeys_info),q_session_keys_i) at {38} in copy a_1

new res_initiator_random: bitstring creating res_initiator_random_2 at {39} in copy a_1

out(c, (~M_13,~M_14,~M_15)) with ~M_13 = res_initiator_random_2, ~M_14 = resumption_id_6, ~M_15 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_3))),hash((seed_x_2,fresh_x_2))),(res_initiator_random_2,resumption_id_6),sigma1_resume),nil,resume1mic_nonce,nil) at {42} in copy a_1

out(c, ~M_16) with ~M_16 = seed_x_2 at {98} in copy a_2

The attacker has the message dec(hash((~M_16,~M_9)),~M_10) = q_eph_x in phase 2.
A trace has been found.
RESULT not attacker_p2(q_eph_x[]) is false.
-- Query not attacker_p2(q_eph_y[]) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 197 rules (102 with conclusion selected). Queue: 69 rules.
400 rules inserted. Base: 383 rules (117 with conclusion selected). Queue: 185 rules.
600 rules inserted. Base: 502 rules (117 with conclusion selected). Queue: 364 rules.
800 rules inserted. Base: 615 rules (117 with conclusion selected). Queue: 400 rules.
1000 rules inserted. Base: 704 rules (117 with conclusion selected). Queue: 461 rules.
1200 rules inserted. Base: 774 rules (122 with conclusion selected). Queue: 537 rules.
1400 rules inserted. Base: 929 rules (132 with conclusion selected). Queue: 525 rules.
1600 rules inserted. Base: 984 rules (132 with conclusion selected). Queue: 559 rules.
1800 rules inserted. Base: 1102 rules (132 with conclusion selected). Queue: 572 rules.
2000 rules inserted. Base: 1235 rules (132 with conclusion selected). Queue: 613 rules.
2200 rules inserted. Base: 1292 rules (132 with conclusion selected). Queue: 619 rules.
2400 rules inserted. Base: 1424 rules (132 with conclusion selected). Queue: 655 rules.
2600 rules inserted. Base: 1547 rules (138 with conclusion selected). Queue: 694 rules.
2800 rules inserted. Base: 1544 rules (138 with conclusion selected). Queue: 680 rules.
3000 rules inserted. Base: 1669 rules (138 with conclusion selected). Queue: 652 rules.
3200 rules inserted. Base: 1796 rules (140 with conclusion selected). Queue: 677 rules.
3400 rules inserted. Base: 1712 rules (140 with conclusion selected). Queue: 687 rules.
3600 rules inserted. Base: 1786 rules (140 with conclusion selected). Queue: 643 rules.
3800 rules inserted. Base: 1893 rules (140 with conclusion selected). Queue: 656 rules.
4000 rules inserted. Base: 1959 rules (140 with conclusion selected). Queue: 688 rules.
4200 rules inserted. Base: 2027 rules (140 with conclusion selected). Queue: 652 rules.
4400 rules inserted. Base: 2096 rules (141 with conclusion selected). Queue: 673 rules.
4600 rules inserted. Base: 2224 rules (144 with conclusion selected). Queue: 765 rules.
4800 rules inserted. Base: 2122 rules (144 with conclusion selected). Queue: 714 rules.
5000 rules inserted. Base: 2210 rules (147 with conclusion selected). Queue: 749 rules.
5200 rules inserted. Base: 2284 rules (147 with conclusion selected). Queue: 884 rules.
5400 rules inserted. Base: 2299 rules (147 with conclusion selected). Queue: 877 rules.
5600 rules inserted. Base: 2369 rules (148 with conclusion selected). Queue: 904 rules.
5800 rules inserted. Base: 2470 rules (149 with conclusion selected). Queue: 932 rules.
6000 rules inserted. Base: 2541 rules (149 with conclusion selected). Queue: 1029 rules.
6200 rules inserted. Base: 2512 rules (149 with conclusion selected). Queue: 1010 rules.
6400 rules inserted. Base: 2551 rules (149 with conclusion selected). Queue: 1028 rules.
6600 rules inserted. Base: 2662 rules (149 with conclusion selected). Queue: 1057 rules.
6800 rules inserted. Base: 2707 rules (150 with conclusion selected). Queue: 1114 rules.
7000 rules inserted. Base: 2735 rules (150 with conclusion selected). Queue: 1134 rules.
7200 rules inserted. Base: 2536 rules (150 with conclusion selected). Queue: 1089 rules.
7400 rules inserted. Base: 2586 rules (150 with conclusion selected). Queue: 1103 rules.
7600 rules inserted. Base: 2658 rules (150 with conclusion selected). Queue: 1117 rules.
7800 rules inserted. Base: 2693 rules (150 with conclusion selected). Queue: 1166 rules.
8000 rules inserted. Base: 2742 rules (150 with conclusion selected). Queue: 1137 rules.
8200 rules inserted. Base: 2720 rules (150 with conclusion selected). Queue: 1123 rules.
8400 rules inserted. Base: 2779 rules (151 with conclusion selected). Queue: 1123 rules.
8600 rules inserted. Base: 2823 rules (151 with conclusion selected). Queue: 1104 rules.
8800 rules inserted. Base: 2888 rules (152 with conclusion selected). Queue: 1159 rules.
9000 rules inserted. Base: 2937 rules (152 with conclusion selected). Queue: 1124 rules.
9200 rules inserted. Base: 2972 rules (152 with conclusion selected). Queue: 1096 rules.
9400 rules inserted. Base: 3030 rules (152 with conclusion selected). Queue: 1076 rules.
9600 rules inserted. Base: 3062 rules (152 with conclusion selected). Queue: 1032 rules.
9800 rules inserted. Base: 3095 rules (152 with conclusion selected). Queue: 1044 rules.
10000 rules inserted. Base: 3132 rules (152 with conclusion selected). Queue: 1023 rules.
10200 rules inserted. Base: 3124 rules (152 with conclusion selected). Queue: 990 rules.
10400 rules inserted. Base: 3175 rules (152 with conclusion selected). Queue: 975 rules.
10600 rules inserted. Base: 3213 rules (152 with conclusion selected). Queue: 931 rules.
10800 rules inserted. Base: 3238 rules (153 with conclusion selected). Queue: 956 rules.
11000 rules inserted. Base: 3149 rules (153 with conclusion selected). Queue: 878 rules.
11200 rules inserted. Base: 3182 rules (154 with conclusion selected). Queue: 879 rules.
11400 rules inserted. Base: 3193 rules (154 with conclusion selected). Queue: 836 rules.
11600 rules inserted. Base: 3215 rules (154 with conclusion selected). Queue: 856 rules.
11800 rules inserted. Base: 3155 rules (154 with conclusion selected). Queue: 784 rules.
12000 rules inserted. Base: 3186 rules (154 with conclusion selected). Queue: 781 rules.
12200 rules inserted. Base: 3226 rules (154 with conclusion selected). Queue: 742 rules.
12400 rules inserted. Base: 3229 rules (154 with conclusion selected). Queue: 718 rules.
12600 rules inserted. Base: 3255 rules (154 with conclusion selected). Queue: 649 rules.
12800 rules inserted. Base: 3288 rules (154 with conclusion selected). Queue: 634 rules.
13000 rules inserted. Base: 3331 rules (154 with conclusion selected). Queue: 598 rules.
13200 rules inserted. Base: 3361 rules (154 with conclusion selected). Queue: 545 rules.
13400 rules inserted. Base: 3382 rules (154 with conclusion selected). Queue: 498 rules.
13600 rules inserted. Base: 3395 rules (154 with conclusion selected). Queue: 436 rules.
13800 rules inserted. Base: 3406 rules (154 with conclusion selected). Queue: 375 rules.
14000 rules inserted. Base: 3410 rules (154 with conclusion selected). Queue: 306 rules.
14200 rules inserted. Base: 3384 rules (154 with conclusion selected). Queue: 235 rules.
14400 rules inserted. Base: 3404 rules (155 with conclusion selected). Queue: 177 rules.
14600 rules inserted. Base: 3428 rules (155 with conclusion selected). Queue: 111 rules.
14800 rules inserted. Base: 3473 rules (155 with conclusion selected). Queue: 32 rules.
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_x[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_r[])
Starting query not attacker_p2(q_eph_y[])
goal reachable: attacker_p2(q_eph_y[])

Derivation:
Abbreviations:
fresh_x_1 = fresh_x[!1 = @sid]
initiator_random_2 = initiator_random[!1 = @sid]
fresh_y_1 = fresh_y[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
responder_random_2 = responder_random_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
responder_noc_key_2 = responder_noc_key[!1 = @sid_1]
resumption_id_4 = resumption_id_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
initiator_noc_key_2 = initiator_noc_key[!1 = @sid]

1. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) may be sent to the attacker at output {18}.
attacker((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2)).

2. By 1, the attacker may know (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2).
Using the function 2-proj-2-tuple the attacker may obtain initiator_random_2.
attacker(initiator_random_2).

3. By 1, the attacker may know (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2).
Using the function 1-proj-2-tuple the attacker may obtain mul_point(P,hash((seed_x[],fresh_x_1))).
attacker(mul_point(P,hash((seed_x[],fresh_x_1)))).

4. By 3, the attacker may know mul_point(P,hash((seed_x[],fresh_x_1))).
By 2, the attacker may know initiator_random_2.
Using the function 2-tuple the attacker may obtain (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2).
attacker((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2)).

5. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
So the message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) may be sent to the attacker at output {70}.
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

6. By 5, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 3-proj-3-tuple the attacker may obtain aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil).
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).

7. By 5, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 2-proj-3-tuple the attacker may obtain mul_point(P,hash((seed_y[],fresh_y_1))).
attacker(mul_point(P,hash((seed_y[],fresh_y_1)))).

8. By 5, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 1-proj-3-tuple the attacker may obtain responder_random_2.
attacker(responder_random_2).

9. By 8, the attacker may know responder_random_2.
By 7, the attacker may know mul_point(P,hash((seed_y[],fresh_y_1))).
By 6, the attacker may know aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil).
Using the function 3-tuple the attacker may obtain (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

10. The message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) that the attacker may have by 9 may be received at input {19}.
So the message aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil) may be sent to the attacker at output {30}.
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil)).

11. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
The message aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil) that the attacker may have by 10 may be received at input {71}.
So the message enc(hash((seed_y[],fresh_y_1)),q_eph_y[]) may be sent to the attacker at output {82}.
attacker(enc(hash((seed_y[],fresh_y_1)),q_eph_y[])).

12. By 11, the attacker may know enc(hash((seed_y[],fresh_y_1)),q_eph_y[]).
So the attacker may know enc(hash((seed_y[],fresh_y_1)),q_eph_y[]) in phase 1.
attacker_p1(enc(hash((seed_y[],fresh_y_1)),q_eph_y[])).

13. By 12, the attacker may know enc(hash((seed_y[],fresh_y_1)),q_eph_y[]) in phase 1.
So the attacker may know enc(hash((seed_y[],fresh_y_1)),q_eph_y[]) in phase 2.
attacker_p2(enc(hash((seed_y[],fresh_y_1)),q_eph_y[])).

14. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
The message aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil) that the attacker may have by 10 may be received at input {71}.
So the message fresh_y_1 may be sent to the attacker at output {81}.
attacker(fresh_y_1).

15. By 14, the attacker may know fresh_y_1.
So the attacker may know fresh_y_1 in phase 1.
attacker_p1(fresh_y_1).

16. By 15, the attacker may know fresh_y_1 in phase 1.
So the attacker may know fresh_y_1 in phase 2.
attacker_p2(fresh_y_1).

17. The message seed_y[] may be sent to the attacker in phase 2 at output {101}.
attacker_p2(seed_y[]).

18. By 17, the attacker may know seed_y[] in phase 2.
By 16, the attacker may know fresh_y_1 in phase 2.
Using the function 2-tuple the attacker may obtain (seed_y[],fresh_y_1) in phase 2.
attacker_p2((seed_y[],fresh_y_1)).

19. By 18, the attacker may know (seed_y[],fresh_y_1) in phase 2.
Using the function hash the attacker may obtain hash((seed_y[],fresh_y_1)) in phase 2.
attacker_p2(hash((seed_y[],fresh_y_1))).

20. By 19, the attacker may know hash((seed_y[],fresh_y_1)) in phase 2.
By 13, the attacker may know enc(hash((seed_y[],fresh_y_1)),q_eph_y[]) in phase 2.
Using the function dec the attacker may obtain q_eph_y[] in phase 2.
attacker_p2(q_eph_y[]).

21. By 20, attacker_p2(q_eph_y[]).
The goal is reached, represented in the following fact:
attacker_p2(q_eph_y[]).


A more detailed output of the traces is available with
  set traceDisplay = long.

new ipk: key creating ipk_3 at {1}

new seed_x: bitstring creating seed_x_2 at {2}

new seed_y: bitstring creating seed_y_2 at {3}

out(c, ~M) with ~M = mul_point(P,noc_signing_key) at {5}

new responder_noc_key: key creating responder_noc_key_3 at {51} in copy a

new initiator_noc_key: key creating initiator_noc_key_3 at {7} in copy a_1

new fresh_x: bitstring creating fresh_x_2 at {13} in copy a_1

new initiator_random: bitstring creating initiator_random_3 at {15} in copy a_1

out(c, (~M_1,~M_2)) with ~M_1 = mul_point(P,hash((seed_x_2,fresh_x_2))), ~M_2 = initiator_random_3 at {18} in copy a_1

in(c, (~M_1,~M_2)) with ~M_1 = mul_point(P,hash((seed_x_2,fresh_x_2))), ~M_2 = initiator_random_3 at {57} in copy a

event start_session_with_initiator(mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3) at {59} in copy a

new fresh_y: bitstring creating fresh_y_2 at {60} in copy a

new responder_random_1: bitstring creating responder_random_3 at {62} in copy a

new resumption_id_1: bitstring creating resumption_id_5 at {63} in copy a

out(c, (~M_3,~M_4,~M_5)) with ~M_3 = responder_random_3, ~M_4 = mul_point(P,hash((seed_y_2,fresh_y_2))), ~M_5 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil) at {70} in copy a

in(c, (~M_3,~M_4,~M_5)) with ~M_3 = responder_random_3, ~M_4 = mul_point(P,hash((seed_y_2,fresh_y_2))), ~M_5 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil) at {19} in copy a_1

event start_session_with_responder(mul_point(P,hash((seed_y_2,fresh_y_2))),responder_random_3) at {21} in copy a_1

event accept_responder_identity(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),responder_random_3) at {26} in copy a_1

out(c, ~M_6) with ~M_6 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_2)))))),ncase_sigma3n,nil) at {30} in copy a_1

event initiator_end(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3) at {32} in copy a_1

out(c, ~M_7) with ~M_7 = enc(mul_point(P,initiator_noc_key_3),q_id_i_i) at {33} in copy a_1

out(c, ~M_8) with ~M_8 = enc(mul_point(P,responder_noc_key_3),q_id_r_i) at {34} in copy a_1

out(c, ~M_9) with ~M_9 = fresh_x_2 at {35} in copy a_1

out(c, ~M_10) with ~M_10 = enc(hash((seed_x_2,fresh_x_2)),q_eph_x) at {36} in copy a_1

out(c, ~M_11) with ~M_11 = enc(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),q_shared_secret_i) at {37} in copy a_1

out(c, ~M_12) with ~M_12 = enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil)),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_2)))))),ncase_sigma3n,nil)))),sekeys_info),q_session_keys_i) at {38} in copy a_1

new res_initiator_random: bitstring creating res_initiator_random_2 at {39} in copy a_1

out(c, (~M_13,~M_14,~M_15)) with ~M_13 = res_initiator_random_2, ~M_14 = resumption_id_5, ~M_15 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(res_initiator_random_2,resumption_id_5),sigma1_resume),nil,resume1mic_nonce,nil) at {42} in copy a_1

in(c, ~M_6) with ~M_6 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_2)))))),ncase_sigma3n,nil) at {71} in copy a

out(c, ~M_16) with ~M_16 = sigma_finished at {77} in copy a

event responder_end(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),responder_random_3) at {78} in copy a

out(c, ~M_17) with ~M_17 = enc(mul_point(P,initiator_noc_key_3),q_id_i_r) at {79} in copy a

out(c, ~M_18) with ~M_18 = enc(mul_point(P,responder_noc_key_3),q_id_r_r) at {80} in copy a

out(c, ~M_19) with ~M_19 = fresh_y_2 at {81} in copy a

out(c, ~M_20) with ~M_20 = enc(hash((seed_y_2,fresh_y_2)),q_eph_y) at {82} in copy a

out(c, ~M_21) with ~M_21 = enc(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),q_shared_secret_r) at {83} in copy a

out(c, ~M_22) with ~M_22 = enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil)),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_2)))))),ncase_sigma3n,nil)))),sekeys_info),q_session_keys_r) at {84} in copy a

out(c, ~M_23) with ~M_23 = seed_y_2 at {101} in copy a_2

The attacker has the message dec(hash((~M_23,~M_19)),~M_20) = q_eph_y in phase 2.
A trace has been found.
RESULT not attacker_p2(q_eph_y[]) is false.
-- Query not attacker_p2(q_shared_secret_i[]) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 197 rules (102 with conclusion selected). Queue: 69 rules.
400 rules inserted. Base: 383 rules (117 with conclusion selected). Queue: 185 rules.
600 rules inserted. Base: 502 rules (117 with conclusion selected). Queue: 364 rules.
800 rules inserted. Base: 615 rules (117 with conclusion selected). Queue: 400 rules.
1000 rules inserted. Base: 704 rules (117 with conclusion selected). Queue: 461 rules.
1200 rules inserted. Base: 774 rules (122 with conclusion selected). Queue: 537 rules.
1400 rules inserted. Base: 929 rules (132 with conclusion selected). Queue: 525 rules.
1600 rules inserted. Base: 984 rules (132 with conclusion selected). Queue: 559 rules.
1800 rules inserted. Base: 1102 rules (132 with conclusion selected). Queue: 572 rules.
2000 rules inserted. Base: 1235 rules (132 with conclusion selected). Queue: 613 rules.
2200 rules inserted. Base: 1292 rules (132 with conclusion selected). Queue: 619 rules.
2400 rules inserted. Base: 1424 rules (132 with conclusion selected). Queue: 655 rules.
2600 rules inserted. Base: 1547 rules (138 with conclusion selected). Queue: 694 rules.
2800 rules inserted. Base: 1544 rules (138 with conclusion selected). Queue: 680 rules.
3000 rules inserted. Base: 1669 rules (138 with conclusion selected). Queue: 652 rules.
3200 rules inserted. Base: 1796 rules (140 with conclusion selected). Queue: 677 rules.
3400 rules inserted. Base: 1712 rules (140 with conclusion selected). Queue: 687 rules.
3600 rules inserted. Base: 1786 rules (140 with conclusion selected). Queue: 643 rules.
3800 rules inserted. Base: 1893 rules (140 with conclusion selected). Queue: 656 rules.
4000 rules inserted. Base: 1959 rules (140 with conclusion selected). Queue: 688 rules.
4200 rules inserted. Base: 2027 rules (140 with conclusion selected). Queue: 652 rules.
4400 rules inserted. Base: 2096 rules (141 with conclusion selected). Queue: 673 rules.
4600 rules inserted. Base: 2224 rules (144 with conclusion selected). Queue: 765 rules.
4800 rules inserted. Base: 2122 rules (144 with conclusion selected). Queue: 714 rules.
5000 rules inserted. Base: 2210 rules (147 with conclusion selected). Queue: 749 rules.
5200 rules inserted. Base: 2284 rules (147 with conclusion selected). Queue: 884 rules.
5400 rules inserted. Base: 2299 rules (147 with conclusion selected). Queue: 877 rules.
5600 rules inserted. Base: 2369 rules (148 with conclusion selected). Queue: 904 rules.
5800 rules inserted. Base: 2470 rules (149 with conclusion selected). Queue: 932 rules.
6000 rules inserted. Base: 2541 rules (149 with conclusion selected). Queue: 1029 rules.
6200 rules inserted. Base: 2512 rules (149 with conclusion selected). Queue: 1010 rules.
6400 rules inserted. Base: 2551 rules (149 with conclusion selected). Queue: 1028 rules.
6600 rules inserted. Base: 2662 rules (149 with conclusion selected). Queue: 1057 rules.
6800 rules inserted. Base: 2707 rules (150 with conclusion selected). Queue: 1114 rules.
7000 rules inserted. Base: 2735 rules (150 with conclusion selected). Queue: 1134 rules.
7200 rules inserted. Base: 2536 rules (150 with conclusion selected). Queue: 1089 rules.
7400 rules inserted. Base: 2586 rules (150 with conclusion selected). Queue: 1103 rules.
7600 rules inserted. Base: 2658 rules (150 with conclusion selected). Queue: 1117 rules.
7800 rules inserted. Base: 2693 rules (150 with conclusion selected). Queue: 1166 rules.
8000 rules inserted. Base: 2742 rules (150 with conclusion selected). Queue: 1137 rules.
8200 rules inserted. Base: 2720 rules (150 with conclusion selected). Queue: 1123 rules.
8400 rules inserted. Base: 2779 rules (151 with conclusion selected). Queue: 1123 rules.
8600 rules inserted. Base: 2823 rules (151 with conclusion selected). Queue: 1104 rules.
8800 rules inserted. Base: 2888 rules (152 with conclusion selected). Queue: 1159 rules.
9000 rules inserted. Base: 2937 rules (152 with conclusion selected). Queue: 1124 rules.
9200 rules inserted. Base: 2972 rules (152 with conclusion selected). Queue: 1096 rules.
9400 rules inserted. Base: 3030 rules (152 with conclusion selected). Queue: 1076 rules.
9600 rules inserted. Base: 3062 rules (152 with conclusion selected). Queue: 1032 rules.
9800 rules inserted. Base: 3095 rules (152 with conclusion selected). Queue: 1044 rules.
10000 rules inserted. Base: 3132 rules (152 with conclusion selected). Queue: 1023 rules.
10200 rules inserted. Base: 3124 rules (152 with conclusion selected). Queue: 990 rules.
10400 rules inserted. Base: 3175 rules (152 with conclusion selected). Queue: 975 rules.
10600 rules inserted. Base: 3213 rules (152 with conclusion selected). Queue: 931 rules.
10800 rules inserted. Base: 3238 rules (153 with conclusion selected). Queue: 956 rules.
11000 rules inserted. Base: 3149 rules (153 with conclusion selected). Queue: 878 rules.
11200 rules inserted. Base: 3182 rules (154 with conclusion selected). Queue: 879 rules.
11400 rules inserted. Base: 3193 rules (154 with conclusion selected). Queue: 836 rules.
11600 rules inserted. Base: 3215 rules (154 with conclusion selected). Queue: 856 rules.
11800 rules inserted. Base: 3155 rules (154 with conclusion selected). Queue: 784 rules.
12000 rules inserted. Base: 3186 rules (154 with conclusion selected). Queue: 781 rules.
12200 rules inserted. Base: 3226 rules (154 with conclusion selected). Queue: 742 rules.
12400 rules inserted. Base: 3229 rules (154 with conclusion selected). Queue: 718 rules.
12600 rules inserted. Base: 3255 rules (154 with conclusion selected). Queue: 649 rules.
12800 rules inserted. Base: 3288 rules (154 with conclusion selected). Queue: 634 rules.
13000 rules inserted. Base: 3331 rules (154 with conclusion selected). Queue: 598 rules.
13200 rules inserted. Base: 3361 rules (154 with conclusion selected). Queue: 545 rules.
13400 rules inserted. Base: 3382 rules (154 with conclusion selected). Queue: 498 rules.
13600 rules inserted. Base: 3395 rules (154 with conclusion selected). Queue: 436 rules.
13800 rules inserted. Base: 3406 rules (154 with conclusion selected). Queue: 375 rules.
14000 rules inserted. Base: 3410 rules (154 with conclusion selected). Queue: 306 rules.
14200 rules inserted. Base: 3384 rules (154 with conclusion selected). Queue: 235 rules.
14400 rules inserted. Base: 3404 rules (155 with conclusion selected). Queue: 177 rules.
14600 rules inserted. Base: 3428 rules (155 with conclusion selected). Queue: 111 rules.
14800 rules inserted. Base: 3473 rules (155 with conclusion selected). Queue: 32 rules.
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_x[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_r[])
Starting query not attacker_p2(q_shared_secret_i[])
goal reachable: attacker_p2(q_shared_secret_i[])

Derivation:
Abbreviations:
fresh_x_1 = fresh_x[!1 = @sid]
initiator_random_2 = initiator_random[!1 = @sid]
fresh_y_1 = fresh_y[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
responder_random_2 = responder_random_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
responder_noc_key_2 = responder_noc_key[!1 = @sid_1]
resumption_id_4 = resumption_id_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
initiator_noc_key_2 = initiator_noc_key[!1 = @sid]

1. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) may be sent to the attacker at output {18}.
attacker((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2)).

2. By 1, the attacker may know (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2).
Using the function 2-proj-2-tuple the attacker may obtain initiator_random_2.
attacker(initiator_random_2).

3. By 1, the attacker may know (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2).
Using the function 1-proj-2-tuple the attacker may obtain mul_point(P,hash((seed_x[],fresh_x_1))).
attacker(mul_point(P,hash((seed_x[],fresh_x_1)))).

4. By 3, the attacker may know mul_point(P,hash((seed_x[],fresh_x_1))).
By 2, the attacker may know initiator_random_2.
Using the function 2-tuple the attacker may obtain (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2).
attacker((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2)).

5. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
So the message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) may be sent to the attacker at output {70}.
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

6. By 5, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 3-proj-3-tuple the attacker may obtain aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil).
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).

7. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
So the message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) may be sent to the attacker at output {70}.
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

8. By 7, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 2-proj-3-tuple the attacker may obtain mul_point(P,hash((seed_y[],fresh_y_1))).
attacker(mul_point(P,hash((seed_y[],fresh_y_1)))).

9. By 7, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 1-proj-3-tuple the attacker may obtain responder_random_2.
attacker(responder_random_2).

10. By 9, the attacker may know responder_random_2.
By 8, the attacker may know mul_point(P,hash((seed_y[],fresh_y_1))).
By 6, the attacker may know aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil).
Using the function 3-tuple the attacker may obtain (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

11. The message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) that the attacker may have by 10 may be received at input {19}.
So the message enc(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),q_shared_secret_i[]) may be sent to the attacker at output {37}.
attacker(enc(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),q_shared_secret_i[])).

12. By 11, the attacker may know enc(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),q_shared_secret_i[]).
So the attacker may know enc(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),q_shared_secret_i[]) in phase 1.
attacker_p1(enc(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),q_shared_secret_i[])).

13. By 12, the attacker may know enc(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),q_shared_secret_i[]) in phase 1.
So the attacker may know enc(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),q_shared_secret_i[]) in phase 2.
attacker_p2(enc(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),q_shared_secret_i[])).

14. The message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) that the attacker may have by 7 may be received at input {19}.
So the message aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil) may be sent to the attacker at output {30}.
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil)).

15. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
The message aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil) that the attacker may have by 14 may be received at input {71}.
So the message fresh_y_1 may be sent to the attacker at output {81}.
attacker(fresh_y_1).

16. By 15, the attacker may know fresh_y_1.
So the attacker may know fresh_y_1 in phase 1.
attacker_p1(fresh_y_1).

17. By 16, the attacker may know fresh_y_1 in phase 1.
So the attacker may know fresh_y_1 in phase 2.
attacker_p2(fresh_y_1).

18. The message seed_y[] may be sent to the attacker in phase 2 at output {101}.
attacker_p2(seed_y[]).

19. By 18, the attacker may know seed_y[] in phase 2.
By 17, the attacker may know fresh_y_1 in phase 2.
Using the function 2-tuple the attacker may obtain (seed_y[],fresh_y_1) in phase 2.
attacker_p2((seed_y[],fresh_y_1)).

20. By 19, the attacker may know (seed_y[],fresh_y_1) in phase 2.
Using the function hash the attacker may obtain hash((seed_y[],fresh_y_1)) in phase 2.
attacker_p2(hash((seed_y[],fresh_y_1))).

21. By 3, the attacker may know mul_point(P,hash((seed_x[],fresh_x_1))).
So the attacker may know mul_point(P,hash((seed_x[],fresh_x_1))) in phase 1.
attacker_p1(mul_point(P,hash((seed_x[],fresh_x_1)))).

22. By 21, the attacker may know mul_point(P,hash((seed_x[],fresh_x_1))) in phase 1.
So the attacker may know mul_point(P,hash((seed_x[],fresh_x_1))) in phase 2.
attacker_p2(mul_point(P,hash((seed_x[],fresh_x_1)))).

23. By 22, the attacker may know mul_point(P,hash((seed_x[],fresh_x_1))) in phase 2.
By 20, the attacker may know hash((seed_y[],fresh_y_1)) in phase 2.
Using the function mul_point the attacker may obtain mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))) in phase 2.
attacker_p2(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1)))).

24. By 23, the attacker may know mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))) in phase 2.
By 13, the attacker may know enc(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),q_shared_secret_i[]) in phase 2.
Using the function dec the attacker may obtain q_shared_secret_i[] in phase 2.
attacker_p2(q_shared_secret_i[]).

25. By 24, attacker_p2(q_shared_secret_i[]).
The goal is reached, represented in the following fact:
attacker_p2(q_shared_secret_i[]).


A more detailed output of the traces is available with
  set traceDisplay = long.

new ipk: key creating ipk_3 at {1}

new seed_x: bitstring creating seed_x_2 at {2}

new seed_y: bitstring creating seed_y_2 at {3}

out(c, ~M) with ~M = mul_point(P,noc_signing_key) at {5}

new responder_noc_key: key creating responder_noc_key_3 at {51} in copy a

new initiator_noc_key: key creating initiator_noc_key_3 at {7} in copy a_1

new fresh_x: bitstring creating fresh_x_2 at {13} in copy a_1

new initiator_random: bitstring creating initiator_random_3 at {15} in copy a_1

out(c, (~M_1,~M_2)) with ~M_1 = mul_point(P,hash((seed_x_2,fresh_x_2))), ~M_2 = initiator_random_3 at {18} in copy a_1

in(c, (~M_1,~M_2)) with ~M_1 = mul_point(P,hash((seed_x_2,fresh_x_2))), ~M_2 = initiator_random_3 at {57} in copy a

event start_session_with_initiator(mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3) at {59} in copy a

new fresh_y: bitstring creating fresh_y_2 at {60} in copy a

new responder_random_1: bitstring creating responder_random_3 at {62} in copy a

new resumption_id_1: bitstring creating resumption_id_5 at {63} in copy a

out(c, (~M_3,~M_4,~M_5)) with ~M_3 = responder_random_3, ~M_4 = mul_point(P,hash((seed_y_2,fresh_y_2))), ~M_5 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil) at {70} in copy a

in(c, (~M_3,~M_4,~M_5)) with ~M_3 = responder_random_3, ~M_4 = mul_point(P,hash((seed_y_2,fresh_y_2))), ~M_5 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil) at {19} in copy a_1

event start_session_with_responder(mul_point(P,hash((seed_y_2,fresh_y_2))),responder_random_3) at {21} in copy a_1

event accept_responder_identity(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),responder_random_3) at {26} in copy a_1

out(c, ~M_6) with ~M_6 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_2)))))),ncase_sigma3n,nil) at {30} in copy a_1

event initiator_end(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3) at {32} in copy a_1

out(c, ~M_7) with ~M_7 = enc(mul_point(P,initiator_noc_key_3),q_id_i_i) at {33} in copy a_1

out(c, ~M_8) with ~M_8 = enc(mul_point(P,responder_noc_key_3),q_id_r_i) at {34} in copy a_1

out(c, ~M_9) with ~M_9 = fresh_x_2 at {35} in copy a_1

out(c, ~M_10) with ~M_10 = enc(hash((seed_x_2,fresh_x_2)),q_eph_x) at {36} in copy a_1

out(c, ~M_11) with ~M_11 = enc(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),q_shared_secret_i) at {37} in copy a_1

out(c, ~M_12) with ~M_12 = enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil)),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_2)))))),ncase_sigma3n,nil)))),sekeys_info),q_session_keys_i) at {38} in copy a_1

new res_initiator_random: bitstring creating res_initiator_random_2 at {39} in copy a_1

out(c, (~M_13,~M_14,~M_15)) with ~M_13 = res_initiator_random_2, ~M_14 = resumption_id_5, ~M_15 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(res_initiator_random_2,resumption_id_5),sigma1_resume),nil,resume1mic_nonce,nil) at {42} in copy a_1

in(c, ~M_6) with ~M_6 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_2)))))),ncase_sigma3n,nil) at {71} in copy a

out(c, ~M_16) with ~M_16 = sigma_finished at {77} in copy a

event responder_end(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),responder_random_3) at {78} in copy a

out(c, ~M_17) with ~M_17 = enc(mul_point(P,initiator_noc_key_3),q_id_i_r) at {79} in copy a

out(c, ~M_18) with ~M_18 = enc(mul_point(P,responder_noc_key_3),q_id_r_r) at {80} in copy a

out(c, ~M_19) with ~M_19 = fresh_y_2 at {81} in copy a

out(c, ~M_20) with ~M_20 = enc(hash((seed_y_2,fresh_y_2)),q_eph_y) at {82} in copy a

out(c, ~M_21) with ~M_21 = enc(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),q_shared_secret_r) at {83} in copy a

out(c, ~M_22) with ~M_22 = enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil)),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_2)))))),ncase_sigma3n,nil)))),sekeys_info),q_session_keys_r) at {84} in copy a

out(c, ~M_23) with ~M_23 = seed_y_2 at {101} in copy a_2

The attacker has the message dec(mul_point(~M_1,hash((~M_23,~M_19))),~M_11) = q_shared_secret_i in phase 2.
A trace has been found.
RESULT not attacker_p2(q_shared_secret_i[]) is false.
-- Query not attacker_p2(q_shared_secret_r[]) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 197 rules (102 with conclusion selected). Queue: 69 rules.
400 rules inserted. Base: 383 rules (117 with conclusion selected). Queue: 185 rules.
600 rules inserted. Base: 502 rules (117 with conclusion selected). Queue: 364 rules.
800 rules inserted. Base: 615 rules (117 with conclusion selected). Queue: 400 rules.
1000 rules inserted. Base: 704 rules (117 with conclusion selected). Queue: 461 rules.
1200 rules inserted. Base: 774 rules (122 with conclusion selected). Queue: 537 rules.
1400 rules inserted. Base: 929 rules (132 with conclusion selected). Queue: 525 rules.
1600 rules inserted. Base: 984 rules (132 with conclusion selected). Queue: 559 rules.
1800 rules inserted. Base: 1102 rules (132 with conclusion selected). Queue: 572 rules.
2000 rules inserted. Base: 1235 rules (132 with conclusion selected). Queue: 613 rules.
2200 rules inserted. Base: 1292 rules (132 with conclusion selected). Queue: 619 rules.
2400 rules inserted. Base: 1424 rules (132 with conclusion selected). Queue: 655 rules.
2600 rules inserted. Base: 1547 rules (138 with conclusion selected). Queue: 694 rules.
2800 rules inserted. Base: 1544 rules (138 with conclusion selected). Queue: 680 rules.
3000 rules inserted. Base: 1669 rules (138 with conclusion selected). Queue: 652 rules.
3200 rules inserted. Base: 1796 rules (140 with conclusion selected). Queue: 677 rules.
3400 rules inserted. Base: 1712 rules (140 with conclusion selected). Queue: 687 rules.
3600 rules inserted. Base: 1786 rules (140 with conclusion selected). Queue: 643 rules.
3800 rules inserted. Base: 1893 rules (140 with conclusion selected). Queue: 656 rules.
4000 rules inserted. Base: 1959 rules (140 with conclusion selected). Queue: 688 rules.
4200 rules inserted. Base: 2027 rules (140 with conclusion selected). Queue: 652 rules.
4400 rules inserted. Base: 2096 rules (141 with conclusion selected). Queue: 673 rules.
4600 rules inserted. Base: 2224 rules (144 with conclusion selected). Queue: 765 rules.
4800 rules inserted. Base: 2122 rules (144 with conclusion selected). Queue: 714 rules.
5000 rules inserted. Base: 2210 rules (147 with conclusion selected). Queue: 749 rules.
5200 rules inserted. Base: 2284 rules (147 with conclusion selected). Queue: 884 rules.
5400 rules inserted. Base: 2299 rules (147 with conclusion selected). Queue: 877 rules.
5600 rules inserted. Base: 2369 rules (148 with conclusion selected). Queue: 904 rules.
5800 rules inserted. Base: 2470 rules (149 with conclusion selected). Queue: 932 rules.
6000 rules inserted. Base: 2541 rules (149 with conclusion selected). Queue: 1029 rules.
6200 rules inserted. Base: 2512 rules (149 with conclusion selected). Queue: 1010 rules.
6400 rules inserted. Base: 2551 rules (149 with conclusion selected). Queue: 1028 rules.
6600 rules inserted. Base: 2662 rules (149 with conclusion selected). Queue: 1057 rules.
6800 rules inserted. Base: 2707 rules (150 with conclusion selected). Queue: 1114 rules.
7000 rules inserted. Base: 2735 rules (150 with conclusion selected). Queue: 1134 rules.
7200 rules inserted. Base: 2536 rules (150 with conclusion selected). Queue: 1089 rules.
7400 rules inserted. Base: 2586 rules (150 with conclusion selected). Queue: 1103 rules.
7600 rules inserted. Base: 2658 rules (150 with conclusion selected). Queue: 1117 rules.
7800 rules inserted. Base: 2693 rules (150 with conclusion selected). Queue: 1166 rules.
8000 rules inserted. Base: 2742 rules (150 with conclusion selected). Queue: 1137 rules.
8200 rules inserted. Base: 2720 rules (150 with conclusion selected). Queue: 1123 rules.
8400 rules inserted. Base: 2779 rules (151 with conclusion selected). Queue: 1123 rules.
8600 rules inserted. Base: 2823 rules (151 with conclusion selected). Queue: 1104 rules.
8800 rules inserted. Base: 2888 rules (152 with conclusion selected). Queue: 1159 rules.
9000 rules inserted. Base: 2937 rules (152 with conclusion selected). Queue: 1124 rules.
9200 rules inserted. Base: 2972 rules (152 with conclusion selected). Queue: 1096 rules.
9400 rules inserted. Base: 3030 rules (152 with conclusion selected). Queue: 1076 rules.
9600 rules inserted. Base: 3062 rules (152 with conclusion selected). Queue: 1032 rules.
9800 rules inserted. Base: 3095 rules (152 with conclusion selected). Queue: 1044 rules.
10000 rules inserted. Base: 3132 rules (152 with conclusion selected). Queue: 1023 rules.
10200 rules inserted. Base: 3124 rules (152 with conclusion selected). Queue: 990 rules.
10400 rules inserted. Base: 3175 rules (152 with conclusion selected). Queue: 975 rules.
10600 rules inserted. Base: 3213 rules (152 with conclusion selected). Queue: 931 rules.
10800 rules inserted. Base: 3238 rules (153 with conclusion selected). Queue: 956 rules.
11000 rules inserted. Base: 3149 rules (153 with conclusion selected). Queue: 878 rules.
11200 rules inserted. Base: 3182 rules (154 with conclusion selected). Queue: 879 rules.
11400 rules inserted. Base: 3193 rules (154 with conclusion selected). Queue: 836 rules.
11600 rules inserted. Base: 3215 rules (154 with conclusion selected). Queue: 856 rules.
11800 rules inserted. Base: 3155 rules (154 with conclusion selected). Queue: 784 rules.
12000 rules inserted. Base: 3186 rules (154 with conclusion selected). Queue: 781 rules.
12200 rules inserted. Base: 3226 rules (154 with conclusion selected). Queue: 742 rules.
12400 rules inserted. Base: 3229 rules (154 with conclusion selected). Queue: 718 rules.
12600 rules inserted. Base: 3255 rules (154 with conclusion selected). Queue: 649 rules.
12800 rules inserted. Base: 3288 rules (154 with conclusion selected). Queue: 634 rules.
13000 rules inserted. Base: 3331 rules (154 with conclusion selected). Queue: 598 rules.
13200 rules inserted. Base: 3361 rules (154 with conclusion selected). Queue: 545 rules.
13400 rules inserted. Base: 3382 rules (154 with conclusion selected). Queue: 498 rules.
13600 rules inserted. Base: 3395 rules (154 with conclusion selected). Queue: 436 rules.
13800 rules inserted. Base: 3406 rules (154 with conclusion selected). Queue: 375 rules.
14000 rules inserted. Base: 3410 rules (154 with conclusion selected). Queue: 306 rules.
14200 rules inserted. Base: 3384 rules (154 with conclusion selected). Queue: 235 rules.
14400 rules inserted. Base: 3404 rules (155 with conclusion selected). Queue: 177 rules.
14600 rules inserted. Base: 3428 rules (155 with conclusion selected). Queue: 111 rules.
14800 rules inserted. Base: 3473 rules (155 with conclusion selected). Queue: 32 rules.
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_x[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_r[])
Starting query not attacker_p2(q_shared_secret_r[])
goal reachable: attacker_p2(q_shared_secret_r[])

Derivation:
Abbreviations:
fresh_x_1 = fresh_x[!1 = @sid]
initiator_random_2 = initiator_random[!1 = @sid]
fresh_y_1 = fresh_y[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
responder_random_2 = responder_random_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
responder_noc_key_2 = responder_noc_key[!1 = @sid_1]
resumption_id_4 = resumption_id_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
initiator_noc_key_2 = initiator_noc_key[!1 = @sid]

1. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) may be sent to the attacker at output {18}.
attacker((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2)).

2. By 1, the attacker may know (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2).
Using the function 2-proj-2-tuple the attacker may obtain initiator_random_2.
attacker(initiator_random_2).

3. By 1, the attacker may know (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2).
Using the function 1-proj-2-tuple the attacker may obtain mul_point(P,hash((seed_x[],fresh_x_1))).
attacker(mul_point(P,hash((seed_x[],fresh_x_1)))).

4. By 3, the attacker may know mul_point(P,hash((seed_x[],fresh_x_1))).
By 2, the attacker may know initiator_random_2.
Using the function 2-tuple the attacker may obtain (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2).
attacker((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2)).

5. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
So the message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) may be sent to the attacker at output {70}.
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

6. By 5, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 3-proj-3-tuple the attacker may obtain aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil).
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).

7. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
So the message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) may be sent to the attacker at output {70}.
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

8. By 7, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 2-proj-3-tuple the attacker may obtain mul_point(P,hash((seed_y[],fresh_y_1))).
attacker(mul_point(P,hash((seed_y[],fresh_y_1)))).

9. By 7, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 1-proj-3-tuple the attacker may obtain responder_random_2.
attacker(responder_random_2).

10. By 9, the attacker may know responder_random_2.
By 8, the attacker may know mul_point(P,hash((seed_y[],fresh_y_1))).
By 6, the attacker may know aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil).
Using the function 3-tuple the attacker may obtain (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

11. The message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) that the attacker may have by 10 may be received at input {19}.
So the message aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil) may be sent to the attacker at output {30}.
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil)).

12. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
The message aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil) that the attacker may have by 11 may be received at input {71}.
So the message enc(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),q_shared_secret_r[]) may be sent to the attacker at output {83}.
attacker(enc(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),q_shared_secret_r[])).

13. By 12, the attacker may know enc(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),q_shared_secret_r[]).
So the attacker may know enc(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),q_shared_secret_r[]) in phase 1.
attacker_p1(enc(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),q_shared_secret_r[])).

14. By 13, the attacker may know enc(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),q_shared_secret_r[]) in phase 1.
So the attacker may know enc(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),q_shared_secret_r[]) in phase 2.
attacker_p2(enc(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),q_shared_secret_r[])).

15. The message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) that the attacker may have by 7 may be received at input {19}.
So the message aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil) may be sent to the attacker at output {30}.
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil)).

16. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
The message aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil) that the attacker may have by 15 may be received at input {71}.
So the message fresh_y_1 may be sent to the attacker at output {81}.
attacker(fresh_y_1).

17. By 16, the attacker may know fresh_y_1.
So the attacker may know fresh_y_1 in phase 1.
attacker_p1(fresh_y_1).

18. By 17, the attacker may know fresh_y_1 in phase 1.
So the attacker may know fresh_y_1 in phase 2.
attacker_p2(fresh_y_1).

19. The message seed_y[] may be sent to the attacker in phase 2 at output {101}.
attacker_p2(seed_y[]).

20. By 19, the attacker may know seed_y[] in phase 2.
By 18, the attacker may know fresh_y_1 in phase 2.
Using the function 2-tuple the attacker may obtain (seed_y[],fresh_y_1) in phase 2.
attacker_p2((seed_y[],fresh_y_1)).

21. By 20, the attacker may know (seed_y[],fresh_y_1) in phase 2.
Using the function hash the attacker may obtain hash((seed_y[],fresh_y_1)) in phase 2.
attacker_p2(hash((seed_y[],fresh_y_1))).

22. By 3, the attacker may know mul_point(P,hash((seed_x[],fresh_x_1))).
So the attacker may know mul_point(P,hash((seed_x[],fresh_x_1))) in phase 1.
attacker_p1(mul_point(P,hash((seed_x[],fresh_x_1)))).

23. By 22, the attacker may know mul_point(P,hash((seed_x[],fresh_x_1))) in phase 1.
So the attacker may know mul_point(P,hash((seed_x[],fresh_x_1))) in phase 2.
attacker_p2(mul_point(P,hash((seed_x[],fresh_x_1)))).

24. By 23, the attacker may know mul_point(P,hash((seed_x[],fresh_x_1))) in phase 2.
By 21, the attacker may know hash((seed_y[],fresh_y_1)) in phase 2.
Using the function mul_point the attacker may obtain mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))) in phase 2.
attacker_p2(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1)))).

25. By 24, the attacker may know mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))) in phase 2.
By 14, the attacker may know enc(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),q_shared_secret_r[]) in phase 2.
Using the function dec the attacker may obtain q_shared_secret_r[] in phase 2.
attacker_p2(q_shared_secret_r[]).

26. By 25, attacker_p2(q_shared_secret_r[]).
The goal is reached, represented in the following fact:
attacker_p2(q_shared_secret_r[]).


A more detailed output of the traces is available with
  set traceDisplay = long.

new ipk: key creating ipk_3 at {1}

new seed_x: bitstring creating seed_x_2 at {2}

new seed_y: bitstring creating seed_y_2 at {3}

out(c, ~M) with ~M = mul_point(P,noc_signing_key) at {5}

new responder_noc_key: key creating responder_noc_key_3 at {51} in copy a

new initiator_noc_key: key creating initiator_noc_key_3 at {7} in copy a_1

new fresh_x: bitstring creating fresh_x_2 at {13} in copy a_1

new initiator_random: bitstring creating initiator_random_3 at {15} in copy a_1

out(c, (~M_1,~M_2)) with ~M_1 = mul_point(P,hash((seed_x_2,fresh_x_2))), ~M_2 = initiator_random_3 at {18} in copy a_1

in(c, (~M_1,~M_2)) with ~M_1 = mul_point(P,hash((seed_x_2,fresh_x_2))), ~M_2 = initiator_random_3 at {57} in copy a

event start_session_with_initiator(mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3) at {59} in copy a

new fresh_y: bitstring creating fresh_y_2 at {60} in copy a

new responder_random_1: bitstring creating responder_random_3 at {62} in copy a

new resumption_id_1: bitstring creating resumption_id_5 at {63} in copy a

out(c, (~M_3,~M_4,~M_5)) with ~M_3 = responder_random_3, ~M_4 = mul_point(P,hash((seed_y_2,fresh_y_2))), ~M_5 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil) at {70} in copy a

in(c, (~M_3,~M_4,~M_5)) with ~M_3 = responder_random_3, ~M_4 = mul_point(P,hash((seed_y_2,fresh_y_2))), ~M_5 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil) at {19} in copy a_1

event start_session_with_responder(mul_point(P,hash((seed_y_2,fresh_y_2))),responder_random_3) at {21} in copy a_1

event accept_responder_identity(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),responder_random_3) at {26} in copy a_1

out(c, ~M_6) with ~M_6 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_2)))))),ncase_sigma3n,nil) at {30} in copy a_1

event initiator_end(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3) at {32} in copy a_1

out(c, ~M_7) with ~M_7 = enc(mul_point(P,initiator_noc_key_3),q_id_i_i) at {33} in copy a_1

out(c, ~M_8) with ~M_8 = enc(mul_point(P,responder_noc_key_3),q_id_r_i) at {34} in copy a_1

out(c, ~M_9) with ~M_9 = fresh_x_2 at {35} in copy a_1

out(c, ~M_10) with ~M_10 = enc(hash((seed_x_2,fresh_x_2)),q_eph_x) at {36} in copy a_1

out(c, ~M_11) with ~M_11 = enc(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),q_shared_secret_i) at {37} in copy a_1

out(c, ~M_12) with ~M_12 = enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil)),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_2)))))),ncase_sigma3n,nil)))),sekeys_info),q_session_keys_i) at {38} in copy a_1

new res_initiator_random: bitstring creating res_initiator_random_2 at {39} in copy a_1

out(c, (~M_13,~M_14,~M_15)) with ~M_13 = res_initiator_random_2, ~M_14 = resumption_id_5, ~M_15 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(res_initiator_random_2,resumption_id_5),sigma1_resume),nil,resume1mic_nonce,nil) at {42} in copy a_1

in(c, ~M_6) with ~M_6 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_2)))))),ncase_sigma3n,nil) at {71} in copy a

out(c, ~M_16) with ~M_16 = sigma_finished at {77} in copy a

event responder_end(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),responder_random_3) at {78} in copy a

out(c, ~M_17) with ~M_17 = enc(mul_point(P,initiator_noc_key_3),q_id_i_r) at {79} in copy a

out(c, ~M_18) with ~M_18 = enc(mul_point(P,responder_noc_key_3),q_id_r_r) at {80} in copy a

out(c, ~M_19) with ~M_19 = fresh_y_2 at {81} in copy a

out(c, ~M_20) with ~M_20 = enc(hash((seed_y_2,fresh_y_2)),q_eph_y) at {82} in copy a

out(c, ~M_21) with ~M_21 = enc(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),q_shared_secret_r) at {83} in copy a

out(c, ~M_22) with ~M_22 = enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil)),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_2)))))),ncase_sigma3n,nil)))),sekeys_info),q_session_keys_r) at {84} in copy a

out(c, ~M_23) with ~M_23 = seed_y_2 at {101} in copy a_2

The attacker has the message dec(mul_point(~M_1,hash((~M_23,~M_19))),~M_21) = q_shared_secret_r in phase 2.
A trace has been found.
RESULT not attacker_p2(q_shared_secret_r[]) is false.
-- Query not attacker_p2(q_session_keys_i[]) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 197 rules (102 with conclusion selected). Queue: 69 rules.
400 rules inserted. Base: 383 rules (117 with conclusion selected). Queue: 185 rules.
600 rules inserted. Base: 502 rules (117 with conclusion selected). Queue: 364 rules.
800 rules inserted. Base: 615 rules (117 with conclusion selected). Queue: 400 rules.
1000 rules inserted. Base: 704 rules (117 with conclusion selected). Queue: 461 rules.
1200 rules inserted. Base: 774 rules (122 with conclusion selected). Queue: 537 rules.
1400 rules inserted. Base: 929 rules (132 with conclusion selected). Queue: 525 rules.
1600 rules inserted. Base: 984 rules (132 with conclusion selected). Queue: 559 rules.
1800 rules inserted. Base: 1102 rules (132 with conclusion selected). Queue: 572 rules.
2000 rules inserted. Base: 1235 rules (132 with conclusion selected). Queue: 613 rules.
2200 rules inserted. Base: 1292 rules (132 with conclusion selected). Queue: 619 rules.
2400 rules inserted. Base: 1424 rules (132 with conclusion selected). Queue: 655 rules.
2600 rules inserted. Base: 1547 rules (138 with conclusion selected). Queue: 694 rules.
2800 rules inserted. Base: 1544 rules (138 with conclusion selected). Queue: 680 rules.
3000 rules inserted. Base: 1669 rules (138 with conclusion selected). Queue: 652 rules.
3200 rules inserted. Base: 1796 rules (140 with conclusion selected). Queue: 677 rules.
3400 rules inserted. Base: 1712 rules (140 with conclusion selected). Queue: 687 rules.
3600 rules inserted. Base: 1786 rules (140 with conclusion selected). Queue: 643 rules.
3800 rules inserted. Base: 1893 rules (140 with conclusion selected). Queue: 656 rules.
4000 rules inserted. Base: 1959 rules (140 with conclusion selected). Queue: 688 rules.
4200 rules inserted. Base: 2027 rules (140 with conclusion selected). Queue: 652 rules.
4400 rules inserted. Base: 2096 rules (141 with conclusion selected). Queue: 673 rules.
4600 rules inserted. Base: 2224 rules (144 with conclusion selected). Queue: 765 rules.
4800 rules inserted. Base: 2122 rules (144 with conclusion selected). Queue: 714 rules.
5000 rules inserted. Base: 2210 rules (147 with conclusion selected). Queue: 749 rules.
5200 rules inserted. Base: 2284 rules (147 with conclusion selected). Queue: 884 rules.
5400 rules inserted. Base: 2299 rules (147 with conclusion selected). Queue: 877 rules.
5600 rules inserted. Base: 2369 rules (148 with conclusion selected). Queue: 904 rules.
5800 rules inserted. Base: 2470 rules (149 with conclusion selected). Queue: 932 rules.
6000 rules inserted. Base: 2541 rules (149 with conclusion selected). Queue: 1029 rules.
6200 rules inserted. Base: 2512 rules (149 with conclusion selected). Queue: 1010 rules.
6400 rules inserted. Base: 2551 rules (149 with conclusion selected). Queue: 1028 rules.
6600 rules inserted. Base: 2662 rules (149 with conclusion selected). Queue: 1057 rules.
6800 rules inserted. Base: 2707 rules (150 with conclusion selected). Queue: 1114 rules.
7000 rules inserted. Base: 2735 rules (150 with conclusion selected). Queue: 1134 rules.
7200 rules inserted. Base: 2536 rules (150 with conclusion selected). Queue: 1089 rules.
7400 rules inserted. Base: 2586 rules (150 with conclusion selected). Queue: 1103 rules.
7600 rules inserted. Base: 2658 rules (150 with conclusion selected). Queue: 1117 rules.
7800 rules inserted. Base: 2693 rules (150 with conclusion selected). Queue: 1166 rules.
8000 rules inserted. Base: 2742 rules (150 with conclusion selected). Queue: 1137 rules.
8200 rules inserted. Base: 2720 rules (150 with conclusion selected). Queue: 1123 rules.
8400 rules inserted. Base: 2779 rules (151 with conclusion selected). Queue: 1123 rules.
8600 rules inserted. Base: 2823 rules (151 with conclusion selected). Queue: 1104 rules.
8800 rules inserted. Base: 2888 rules (152 with conclusion selected). Queue: 1159 rules.
9000 rules inserted. Base: 2937 rules (152 with conclusion selected). Queue: 1124 rules.
9200 rules inserted. Base: 2972 rules (152 with conclusion selected). Queue: 1096 rules.
9400 rules inserted. Base: 3030 rules (152 with conclusion selected). Queue: 1076 rules.
9600 rules inserted. Base: 3062 rules (152 with conclusion selected). Queue: 1032 rules.
9800 rules inserted. Base: 3095 rules (152 with conclusion selected). Queue: 1044 rules.
10000 rules inserted. Base: 3132 rules (152 with conclusion selected). Queue: 1023 rules.
10200 rules inserted. Base: 3124 rules (152 with conclusion selected). Queue: 990 rules.
10400 rules inserted. Base: 3175 rules (152 with conclusion selected). Queue: 975 rules.
10600 rules inserted. Base: 3213 rules (152 with conclusion selected). Queue: 931 rules.
10800 rules inserted. Base: 3238 rules (153 with conclusion selected). Queue: 956 rules.
11000 rules inserted. Base: 3149 rules (153 with conclusion selected). Queue: 878 rules.
11200 rules inserted. Base: 3182 rules (154 with conclusion selected). Queue: 879 rules.
11400 rules inserted. Base: 3193 rules (154 with conclusion selected). Queue: 836 rules.
11600 rules inserted. Base: 3215 rules (154 with conclusion selected). Queue: 856 rules.
11800 rules inserted. Base: 3155 rules (154 with conclusion selected). Queue: 784 rules.
12000 rules inserted. Base: 3186 rules (154 with conclusion selected). Queue: 781 rules.
12200 rules inserted. Base: 3226 rules (154 with conclusion selected). Queue: 742 rules.
12400 rules inserted. Base: 3229 rules (154 with conclusion selected). Queue: 718 rules.
12600 rules inserted. Base: 3255 rules (154 with conclusion selected). Queue: 649 rules.
12800 rules inserted. Base: 3288 rules (154 with conclusion selected). Queue: 634 rules.
13000 rules inserted. Base: 3331 rules (154 with conclusion selected). Queue: 598 rules.
13200 rules inserted. Base: 3361 rules (154 with conclusion selected). Queue: 545 rules.
13400 rules inserted. Base: 3382 rules (154 with conclusion selected). Queue: 498 rules.
13600 rules inserted. Base: 3395 rules (154 with conclusion selected). Queue: 436 rules.
13800 rules inserted. Base: 3406 rules (154 with conclusion selected). Queue: 375 rules.
14000 rules inserted. Base: 3410 rules (154 with conclusion selected). Queue: 306 rules.
14200 rules inserted. Base: 3384 rules (154 with conclusion selected). Queue: 235 rules.
14400 rules inserted. Base: 3404 rules (155 with conclusion selected). Queue: 177 rules.
14600 rules inserted. Base: 3428 rules (155 with conclusion selected). Queue: 111 rules.
14800 rules inserted. Base: 3473 rules (155 with conclusion selected). Queue: 32 rules.
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_x[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_r[])
Starting query not attacker_p2(q_session_keys_i[])
RESULT not attacker_p2(q_session_keys_i[]) is true.
-- Query not attacker_p2(q_session_keys_r[]) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 197 rules (102 with conclusion selected). Queue: 69 rules.
400 rules inserted. Base: 383 rules (117 with conclusion selected). Queue: 185 rules.
600 rules inserted. Base: 502 rules (117 with conclusion selected). Queue: 364 rules.
800 rules inserted. Base: 615 rules (117 with conclusion selected). Queue: 400 rules.
1000 rules inserted. Base: 704 rules (117 with conclusion selected). Queue: 461 rules.
1200 rules inserted. Base: 774 rules (122 with conclusion selected). Queue: 537 rules.
1400 rules inserted. Base: 929 rules (132 with conclusion selected). Queue: 525 rules.
1600 rules inserted. Base: 984 rules (132 with conclusion selected). Queue: 559 rules.
1800 rules inserted. Base: 1102 rules (132 with conclusion selected). Queue: 572 rules.
2000 rules inserted. Base: 1235 rules (132 with conclusion selected). Queue: 613 rules.
2200 rules inserted. Base: 1292 rules (132 with conclusion selected). Queue: 619 rules.
2400 rules inserted. Base: 1424 rules (132 with conclusion selected). Queue: 655 rules.
2600 rules inserted. Base: 1547 rules (138 with conclusion selected). Queue: 694 rules.
2800 rules inserted. Base: 1544 rules (138 with conclusion selected). Queue: 680 rules.
3000 rules inserted. Base: 1669 rules (138 with conclusion selected). Queue: 652 rules.
3200 rules inserted. Base: 1796 rules (140 with conclusion selected). Queue: 677 rules.
3400 rules inserted. Base: 1712 rules (140 with conclusion selected). Queue: 687 rules.
3600 rules inserted. Base: 1786 rules (140 with conclusion selected). Queue: 643 rules.
3800 rules inserted. Base: 1893 rules (140 with conclusion selected). Queue: 656 rules.
4000 rules inserted. Base: 1959 rules (140 with conclusion selected). Queue: 688 rules.
4200 rules inserted. Base: 2027 rules (140 with conclusion selected). Queue: 652 rules.
4400 rules inserted. Base: 2096 rules (141 with conclusion selected). Queue: 673 rules.
4600 rules inserted. Base: 2224 rules (144 with conclusion selected). Queue: 765 rules.
4800 rules inserted. Base: 2122 rules (144 with conclusion selected). Queue: 714 rules.
5000 rules inserted. Base: 2210 rules (147 with conclusion selected). Queue: 749 rules.
5200 rules inserted. Base: 2284 rules (147 with conclusion selected). Queue: 884 rules.
5400 rules inserted. Base: 2299 rules (147 with conclusion selected). Queue: 877 rules.
5600 rules inserted. Base: 2369 rules (148 with conclusion selected). Queue: 904 rules.
5800 rules inserted. Base: 2470 rules (149 with conclusion selected). Queue: 932 rules.
6000 rules inserted. Base: 2541 rules (149 with conclusion selected). Queue: 1029 rules.
6200 rules inserted. Base: 2512 rules (149 with conclusion selected). Queue: 1010 rules.
6400 rules inserted. Base: 2551 rules (149 with conclusion selected). Queue: 1028 rules.
6600 rules inserted. Base: 2662 rules (149 with conclusion selected). Queue: 1057 rules.
6800 rules inserted. Base: 2707 rules (150 with conclusion selected). Queue: 1114 rules.
7000 rules inserted. Base: 2735 rules (150 with conclusion selected). Queue: 1134 rules.
7200 rules inserted. Base: 2536 rules (150 with conclusion selected). Queue: 1089 rules.
7400 rules inserted. Base: 2586 rules (150 with conclusion selected). Queue: 1103 rules.
7600 rules inserted. Base: 2658 rules (150 with conclusion selected). Queue: 1117 rules.
7800 rules inserted. Base: 2693 rules (150 with conclusion selected). Queue: 1166 rules.
8000 rules inserted. Base: 2742 rules (150 with conclusion selected). Queue: 1137 rules.
8200 rules inserted. Base: 2720 rules (150 with conclusion selected). Queue: 1123 rules.
8400 rules inserted. Base: 2779 rules (151 with conclusion selected). Queue: 1123 rules.
8600 rules inserted. Base: 2823 rules (151 with conclusion selected). Queue: 1104 rules.
8800 rules inserted. Base: 2888 rules (152 with conclusion selected). Queue: 1159 rules.
9000 rules inserted. Base: 2937 rules (152 with conclusion selected). Queue: 1124 rules.
9200 rules inserted. Base: 2972 rules (152 with conclusion selected). Queue: 1096 rules.
9400 rules inserted. Base: 3030 rules (152 with conclusion selected). Queue: 1076 rules.
9600 rules inserted. Base: 3062 rules (152 with conclusion selected). Queue: 1032 rules.
9800 rules inserted. Base: 3095 rules (152 with conclusion selected). Queue: 1044 rules.
10000 rules inserted. Base: 3132 rules (152 with conclusion selected). Queue: 1023 rules.
10200 rules inserted. Base: 3124 rules (152 with conclusion selected). Queue: 990 rules.
10400 rules inserted. Base: 3175 rules (152 with conclusion selected). Queue: 975 rules.
10600 rules inserted. Base: 3213 rules (152 with conclusion selected). Queue: 931 rules.
10800 rules inserted. Base: 3238 rules (153 with conclusion selected). Queue: 956 rules.
11000 rules inserted. Base: 3149 rules (153 with conclusion selected). Queue: 878 rules.
11200 rules inserted. Base: 3182 rules (154 with conclusion selected). Queue: 879 rules.
11400 rules inserted. Base: 3193 rules (154 with conclusion selected). Queue: 836 rules.
11600 rules inserted. Base: 3215 rules (154 with conclusion selected). Queue: 856 rules.
11800 rules inserted. Base: 3155 rules (154 with conclusion selected). Queue: 784 rules.
12000 rules inserted. Base: 3186 rules (154 with conclusion selected). Queue: 781 rules.
12200 rules inserted. Base: 3226 rules (154 with conclusion selected). Queue: 742 rules.
12400 rules inserted. Base: 3229 rules (154 with conclusion selected). Queue: 718 rules.
12600 rules inserted. Base: 3255 rules (154 with conclusion selected). Queue: 649 rules.
12800 rules inserted. Base: 3288 rules (154 with conclusion selected). Queue: 634 rules.
13000 rules inserted. Base: 3331 rules (154 with conclusion selected). Queue: 598 rules.
13200 rules inserted. Base: 3361 rules (154 with conclusion selected). Queue: 545 rules.
13400 rules inserted. Base: 3382 rules (154 with conclusion selected). Queue: 498 rules.
13600 rules inserted. Base: 3395 rules (154 with conclusion selected). Queue: 436 rules.
13800 rules inserted. Base: 3406 rules (154 with conclusion selected). Queue: 375 rules.
14000 rules inserted. Base: 3410 rules (154 with conclusion selected). Queue: 306 rules.
14200 rules inserted. Base: 3384 rules (154 with conclusion selected). Queue: 235 rules.
14400 rules inserted. Base: 3404 rules (155 with conclusion selected). Queue: 177 rules.
14600 rules inserted. Base: 3428 rules (155 with conclusion selected). Queue: 111 rules.
14800 rules inserted. Base: 3473 rules (155 with conclusion selected). Queue: 32 rules.
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_x[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_r[])
Starting query not attacker_p2(q_session_keys_r[])
RESULT not attacker_p2(q_session_keys_r[]) is true.
-- Query not attacker_p2(q_resumption_session_keys_i[]) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 197 rules (102 with conclusion selected). Queue: 69 rules.
400 rules inserted. Base: 383 rules (117 with conclusion selected). Queue: 185 rules.
600 rules inserted. Base: 502 rules (117 with conclusion selected). Queue: 364 rules.
800 rules inserted. Base: 615 rules (117 with conclusion selected). Queue: 400 rules.
1000 rules inserted. Base: 704 rules (117 with conclusion selected). Queue: 461 rules.
1200 rules inserted. Base: 774 rules (122 with conclusion selected). Queue: 537 rules.
1400 rules inserted. Base: 929 rules (132 with conclusion selected). Queue: 525 rules.
1600 rules inserted. Base: 984 rules (132 with conclusion selected). Queue: 559 rules.
1800 rules inserted. Base: 1102 rules (132 with conclusion selected). Queue: 572 rules.
2000 rules inserted. Base: 1235 rules (132 with conclusion selected). Queue: 613 rules.
2200 rules inserted. Base: 1292 rules (132 with conclusion selected). Queue: 619 rules.
2400 rules inserted. Base: 1424 rules (132 with conclusion selected). Queue: 655 rules.
2600 rules inserted. Base: 1547 rules (138 with conclusion selected). Queue: 694 rules.
2800 rules inserted. Base: 1544 rules (138 with conclusion selected). Queue: 680 rules.
3000 rules inserted. Base: 1669 rules (138 with conclusion selected). Queue: 652 rules.
3200 rules inserted. Base: 1796 rules (140 with conclusion selected). Queue: 677 rules.
3400 rules inserted. Base: 1712 rules (140 with conclusion selected). Queue: 687 rules.
3600 rules inserted. Base: 1786 rules (140 with conclusion selected). Queue: 643 rules.
3800 rules inserted. Base: 1893 rules (140 with conclusion selected). Queue: 656 rules.
4000 rules inserted. Base: 1959 rules (140 with conclusion selected). Queue: 688 rules.
4200 rules inserted. Base: 2027 rules (140 with conclusion selected). Queue: 652 rules.
4400 rules inserted. Base: 2096 rules (141 with conclusion selected). Queue: 673 rules.
4600 rules inserted. Base: 2224 rules (144 with conclusion selected). Queue: 765 rules.
4800 rules inserted. Base: 2122 rules (144 with conclusion selected). Queue: 714 rules.
5000 rules inserted. Base: 2210 rules (147 with conclusion selected). Queue: 749 rules.
5200 rules inserted. Base: 2284 rules (147 with conclusion selected). Queue: 884 rules.
5400 rules inserted. Base: 2299 rules (147 with conclusion selected). Queue: 877 rules.
5600 rules inserted. Base: 2369 rules (148 with conclusion selected). Queue: 904 rules.
5800 rules inserted. Base: 2470 rules (149 with conclusion selected). Queue: 932 rules.
6000 rules inserted. Base: 2541 rules (149 with conclusion selected). Queue: 1029 rules.
6200 rules inserted. Base: 2512 rules (149 with conclusion selected). Queue: 1010 rules.
6400 rules inserted. Base: 2551 rules (149 with conclusion selected). Queue: 1028 rules.
6600 rules inserted. Base: 2662 rules (149 with conclusion selected). Queue: 1057 rules.
6800 rules inserted. Base: 2707 rules (150 with conclusion selected). Queue: 1114 rules.
7000 rules inserted. Base: 2735 rules (150 with conclusion selected). Queue: 1134 rules.
7200 rules inserted. Base: 2536 rules (150 with conclusion selected). Queue: 1089 rules.
7400 rules inserted. Base: 2586 rules (150 with conclusion selected). Queue: 1103 rules.
7600 rules inserted. Base: 2658 rules (150 with conclusion selected). Queue: 1117 rules.
7800 rules inserted. Base: 2693 rules (150 with conclusion selected). Queue: 1166 rules.
8000 rules inserted. Base: 2742 rules (150 with conclusion selected). Queue: 1137 rules.
8200 rules inserted. Base: 2720 rules (150 with conclusion selected). Queue: 1123 rules.
8400 rules inserted. Base: 2779 rules (151 with conclusion selected). Queue: 1123 rules.
8600 rules inserted. Base: 2823 rules (151 with conclusion selected). Queue: 1104 rules.
8800 rules inserted. Base: 2888 rules (152 with conclusion selected). Queue: 1159 rules.
9000 rules inserted. Base: 2937 rules (152 with conclusion selected). Queue: 1124 rules.
9200 rules inserted. Base: 2972 rules (152 with conclusion selected). Queue: 1096 rules.
9400 rules inserted. Base: 3030 rules (152 with conclusion selected). Queue: 1076 rules.
9600 rules inserted. Base: 3062 rules (152 with conclusion selected). Queue: 1032 rules.
9800 rules inserted. Base: 3095 rules (152 with conclusion selected). Queue: 1044 rules.
10000 rules inserted. Base: 3132 rules (152 with conclusion selected). Queue: 1023 rules.
10200 rules inserted. Base: 3124 rules (152 with conclusion selected). Queue: 990 rules.
10400 rules inserted. Base: 3175 rules (152 with conclusion selected). Queue: 975 rules.
10600 rules inserted. Base: 3213 rules (152 with conclusion selected). Queue: 931 rules.
10800 rules inserted. Base: 3238 rules (153 with conclusion selected). Queue: 956 rules.
11000 rules inserted. Base: 3149 rules (153 with conclusion selected). Queue: 878 rules.
11200 rules inserted. Base: 3182 rules (154 with conclusion selected). Queue: 879 rules.
11400 rules inserted. Base: 3193 rules (154 with conclusion selected). Queue: 836 rules.
11600 rules inserted. Base: 3215 rules (154 with conclusion selected). Queue: 856 rules.
11800 rules inserted. Base: 3155 rules (154 with conclusion selected). Queue: 784 rules.
12000 rules inserted. Base: 3186 rules (154 with conclusion selected). Queue: 781 rules.
12200 rules inserted. Base: 3226 rules (154 with conclusion selected). Queue: 742 rules.
12400 rules inserted. Base: 3229 rules (154 with conclusion selected). Queue: 718 rules.
12600 rules inserted. Base: 3255 rules (154 with conclusion selected). Queue: 649 rules.
12800 rules inserted. Base: 3288 rules (154 with conclusion selected). Queue: 634 rules.
13000 rules inserted. Base: 3331 rules (154 with conclusion selected). Queue: 598 rules.
13200 rules inserted. Base: 3361 rules (154 with conclusion selected). Queue: 545 rules.
13400 rules inserted. Base: 3382 rules (154 with conclusion selected). Queue: 498 rules.
13600 rules inserted. Base: 3395 rules (154 with conclusion selected). Queue: 436 rules.
13800 rules inserted. Base: 3406 rules (154 with conclusion selected). Queue: 375 rules.
14000 rules inserted. Base: 3410 rules (154 with conclusion selected). Queue: 306 rules.
14200 rules inserted. Base: 3384 rules (154 with conclusion selected). Queue: 235 rules.
14400 rules inserted. Base: 3404 rules (155 with conclusion selected). Queue: 177 rules.
14600 rules inserted. Base: 3428 rules (155 with conclusion selected). Queue: 111 rules.
14800 rules inserted. Base: 3473 rules (155 with conclusion selected). Queue: 32 rules.
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_x[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_r[])
Starting query not attacker_p2(q_resumption_session_keys_i[])
goal reachable: attacker_p2(q_resumption_session_keys_i[])

Derivation:
Abbreviations:
fresh_x_1 = fresh_x[!1 = @sid]
initiator_random_2 = initiator_random[!1 = @sid]
fresh_y_1 = fresh_y[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
responder_random_2 = responder_random_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
responder_noc_key_2 = responder_noc_key[!1 = @sid_1]
resumption_id_4 = resumption_id_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
res_initiator_random_2 = res_initiator_random[msg2 = (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)),!1 = @sid]
initiator_noc_key_2 = initiator_noc_key[!1 = @sid]
resumption_id_5 = resumption_id_3[initiator_resume1_mic_1 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil),resumption_id_2 = resumption_id_4,res_initiator_random_1 = res_initiator_random_2,msg3_1 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil),msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
responder_random_3 = responder_random_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_2]
fresh_y_2 = fresh_y[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_2]
responder_noc_key_3 = responder_noc_key[!1 = @sid_2]
resumption_id_6 = resumption_id_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_2]
res_initiator_random_3 = res_initiator_random[msg2 = (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)),!1 = @sid]

1. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) may be sent to the attacker at output {18}.
attacker((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2)).

2. By 1, the attacker may know (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2).
Using the function 2-proj-2-tuple the attacker may obtain initiator_random_2.
attacker(initiator_random_2).

3. By 1, the attacker may know (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2).
Using the function 1-proj-2-tuple the attacker may obtain mul_point(P,hash((seed_x[],fresh_x_1))).
attacker(mul_point(P,hash((seed_x[],fresh_x_1)))).

4. By 3, the attacker may know mul_point(P,hash((seed_x[],fresh_x_1))).
By 2, the attacker may know initiator_random_2.
Using the function 2-tuple the attacker may obtain (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2).
attacker((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2)).

5. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
So the message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) may be sent to the attacker at output {70}.
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

6. By 5, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 3-proj-3-tuple the attacker may obtain aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil).
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).

7. By 5, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 2-proj-3-tuple the attacker may obtain mul_point(P,hash((seed_y[],fresh_y_1))).
attacker(mul_point(P,hash((seed_y[],fresh_y_1)))).

8. By 5, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 1-proj-3-tuple the attacker may obtain responder_random_2.
attacker(responder_random_2).

9. By 8, the attacker may know responder_random_2.
By 7, the attacker may know mul_point(P,hash((seed_y[],fresh_y_1))).
By 6, the attacker may know aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil).
Using the function 3-tuple the attacker may obtain (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

10. The message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) that the attacker may have by 9 may be received at input {19}.
So the message aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil) may be sent to the attacker at output {30}.
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil)).

11. The message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) that the attacker may have by 9 may be received at input {19}.
So the message (res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)) may be sent to the attacker at output {42}.
attacker((res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil))).

12. By 11, the attacker may know (res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)).
Using the function 3-proj-3-tuple the attacker may obtain aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil).
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)).

13. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
So the message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) may be sent to the attacker at output {70}.
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

14. By 13, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 3-proj-3-tuple the attacker may obtain aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil).
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).

15. By 8, the attacker may know responder_random_2.
By 7, the attacker may know mul_point(P,hash((seed_y[],fresh_y_1))).
By 14, the attacker may know aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil).
Using the function 3-tuple the attacker may obtain (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

16. The message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) that the attacker may have by 15 may be received at input {19}.
So the message (res_initiator_random_3,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_3,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)) may be sent to the attacker at output {42}.
attacker((res_initiator_random_3,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_3,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil))).

17. By 16, the attacker may know (res_initiator_random_3,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_3,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)).
Using the function 2-proj-3-tuple the attacker may obtain resumption_id_4.
attacker(resumption_id_4).

18. By 11, the attacker may know (res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)).
Using the function 1-proj-3-tuple the attacker may obtain res_initiator_random_2.
attacker(res_initiator_random_2).

19. By 18, the attacker may know res_initiator_random_2.
By 17, the attacker may know resumption_id_4.
By 12, the attacker may know aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil).
Using the function 3-tuple the attacker may obtain (res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)).
attacker((res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil))).

20. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
The message aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil) that the attacker may have by 10 may be received at input {71}.
The message (res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)) that the attacker may have by 19 may be received at input {85}.
So the message (resumption_id_5,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil)) may be sent to the attacker at output {91}.
attacker((resumption_id_5,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil))).

21. By 20, the attacker may know (resumption_id_5,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil)).
Using the function 2-proj-2-tuple the attacker may obtain aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil).
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil)).

22. By 20, the attacker may know (resumption_id_5,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil)).
Using the function 1-proj-2-tuple the attacker may obtain resumption_id_5.
attacker(resumption_id_5).

23. By 22, the attacker may know resumption_id_5.
By 21, the attacker may know aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil).
Using the function 2-tuple the attacker may obtain (resumption_id_5,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil)).
attacker((resumption_id_5,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil))).

24. The message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) that the attacker may have by 9 may be received at input {19}.
The message (resumption_id_5,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil)) that the attacker may have by 23 may be received at input {43}.
So the message enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sessionresumptionkeys),q_resumption_session_keys_i[]) may be sent to the attacker at output {47}.
attacker(enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sessionresumptionkeys),q_resumption_session_keys_i[])).

25. By 24, the attacker may know enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sessionresumptionkeys),q_resumption_session_keys_i[]).
So the attacker may know enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sessionresumptionkeys),q_resumption_session_keys_i[]) in phase 1.
attacker_p1(enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sessionresumptionkeys),q_resumption_session_keys_i[])).

26. Using the function sessionresumptionkeys the attacker may obtain sessionresumptionkeys in phase 1.
attacker_p1(sessionresumptionkeys).

27. By 22, the attacker may know resumption_id_5.
So the attacker may know resumption_id_5 in phase 1.
attacker_p1(resumption_id_5).

28. By 18, the attacker may know res_initiator_random_2.
So the attacker may know res_initiator_random_2 in phase 1.
attacker_p1(res_initiator_random_2).

29. By 28, the attacker may know res_initiator_random_2 in phase 1.
By 27, the attacker may know resumption_id_5 in phase 1.
Using the function 2-tuple the attacker may obtain (res_initiator_random_2,resumption_id_5) in phase 1.
attacker_p1((res_initiator_random_2,resumption_id_5)).

30. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
So the message (responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil)) may be sent to the attacker at output {70}.
attacker((responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil))).

31. By 30, the attacker may know (responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil)).
Using the function 3-proj-3-tuple the attacker may obtain aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil).
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil)).

32. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
So the message (responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_2))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil)) may be sent to the attacker at output {70}.
attacker((responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_2))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil))).

33. By 32, the attacker may know (responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_2))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil)).
Using the function 2-proj-3-tuple the attacker may obtain mul_point(P,hash((seed_y[],fresh_y_2))).
attacker(mul_point(P,hash((seed_y[],fresh_y_2)))).

34. By 32, the attacker may know (responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_2))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil)).
Using the function 1-proj-3-tuple the attacker may obtain responder_random_3.
attacker(responder_random_3).

35. By 34, the attacker may know responder_random_3.
By 33, the attacker may know mul_point(P,hash((seed_y[],fresh_y_2))).
By 31, the attacker may know aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil).
Using the function 3-tuple the attacker may obtain (responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil)).
attacker((responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil))).

36. The message (responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil)) that the attacker may have by 35 may be received at input {19}.
So the message fresh_x_1 may be sent to the attacker at output {35}.
attacker(fresh_x_1).

37. By 36, the attacker may know fresh_x_1.
So the attacker may know fresh_x_1 in phase 1.
attacker_p1(fresh_x_1).

38. The message seed_x[] may be sent to the attacker in phase 1 at output {98}.
attacker_p1(seed_x[]).

39. By 38, the attacker may know seed_x[] in phase 1.
By 37, the attacker may know fresh_x_1 in phase 1.
Using the function 2-tuple the attacker may obtain (seed_x[],fresh_x_1) in phase 1.
attacker_p1((seed_x[],fresh_x_1)).

40. By 39, the attacker may know (seed_x[],fresh_x_1) in phase 1.
Using the function hash the attacker may obtain hash((seed_x[],fresh_x_1)) in phase 1.
attacker_p1(hash((seed_x[],fresh_x_1))).

41. By 7, the attacker may know mul_point(P,hash((seed_y[],fresh_y_1))).
So the attacker may know mul_point(P,hash((seed_y[],fresh_y_1))) in phase 1.
attacker_p1(mul_point(P,hash((seed_y[],fresh_y_1)))).

42. By 41, the attacker may know mul_point(P,hash((seed_y[],fresh_y_1))) in phase 1.
By 40, the attacker may know hash((seed_x[],fresh_x_1)) in phase 1.
Using the function mul_point the attacker may obtain mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))) in phase 1.
attacker_p1(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1)))).

43. By 42, the attacker may know mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))) in phase 1.
By 29, the attacker may know (res_initiator_random_2,resumption_id_5) in phase 1.
By 26, the attacker may know sessionresumptionkeys in phase 1.
Using the function kdf the attacker may obtain kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sessionresumptionkeys) in phase 1.
attacker_p1(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sessionresumptionkeys)).

44. By 43, the attacker may know kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sessionresumptionkeys) in phase 1.
By 25, the attacker may know enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sessionresumptionkeys),q_resumption_session_keys_i[]) in phase 1.
Using the function dec the attacker may obtain q_resumption_session_keys_i[] in phase 1.
attacker_p1(q_resumption_session_keys_i[]).

45. By 44, the attacker may know q_resumption_session_keys_i[] in phase 1.
So the attacker may know q_resumption_session_keys_i[] in phase 2.
attacker_p2(q_resumption_session_keys_i[]).

46. By 45, attacker_p2(q_resumption_session_keys_i[]).
The goal is reached, represented in the following fact:
attacker_p2(q_resumption_session_keys_i[]).


Unified @sid_1 with @sid_2
The clause after UnifyDerivationPrecise is
attacker_p2(q_resumption_session_keys_i[])
This clause still contradicts the query.
A more detailed output of the traces is available with
  set traceDisplay = long.

new ipk: key creating ipk_3 at {1}

new seed_x: bitstring creating seed_x_2 at {2}

new seed_y: bitstring creating seed_y_2 at {3}

out(c, ~M) with ~M = mul_point(P,noc_signing_key) at {5}

new responder_noc_key: key creating responder_noc_key_4 at {51} in copy a

new initiator_noc_key: key creating initiator_noc_key_3 at {7} in copy a_1

new fresh_x: bitstring creating fresh_x_2 at {13} in copy a_1

new initiator_random: bitstring creating initiator_random_3 at {15} in copy a_1

out(c, (~M_1,~M_2)) with ~M_1 = mul_point(P,hash((seed_x_2,fresh_x_2))), ~M_2 = initiator_random_3 at {18} in copy a_1

in(c, (~M_1,~M_2)) with ~M_1 = mul_point(P,hash((seed_x_2,fresh_x_2))), ~M_2 = initiator_random_3 at {57} in copy a

event start_session_with_initiator(mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3) at {59} in copy a

new fresh_y: bitstring creating fresh_y_3 at {60} in copy a

new responder_random_1: bitstring creating responder_random_4 at {62} in copy a

new resumption_id_1: bitstring creating resumption_id_7 at {63} in copy a

out(c, (~M_3,~M_4,~M_5)) with ~M_3 = responder_random_4, ~M_4 = mul_point(P,hash((seed_y_2,fresh_y_3))), ~M_5 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(ipk_3,responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_4),sign(noc_signing_key,mul_point(P,responder_noc_key_4)),sign(responder_noc_key_4,(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_7),ncase_sigma2n,nil) at {70} in copy a

in(c, (~M_3,~M_4,~M_5)) with ~M_3 = responder_random_4, ~M_4 = mul_point(P,hash((seed_y_2,fresh_y_3))), ~M_5 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(ipk_3,responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_4),sign(noc_signing_key,mul_point(P,responder_noc_key_4)),sign(responder_noc_key_4,(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_7),ncase_sigma2n,nil) at {19} in copy a_1

event start_session_with_responder(mul_point(P,hash((seed_y_2,fresh_y_3))),responder_random_4) at {21} in copy a_1

event accept_responder_identity(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),responder_random_4) at {26} in copy a_1

out(c, ~M_6) with ~M_6 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_3))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(ipk_3,responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_4),sign(noc_signing_key,mul_point(P,responder_noc_key_4)),sign(responder_noc_key_4,(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_7),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_3)))))),ncase_sigma3n,nil) at {30} in copy a_1

event initiator_end(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3) at {32} in copy a_1

out(c, ~M_7) with ~M_7 = enc(mul_point(P,initiator_noc_key_3),q_id_i_i) at {33} in copy a_1

out(c, ~M_8) with ~M_8 = enc(mul_point(P,responder_noc_key_4),q_id_r_i) at {34} in copy a_1

out(c, ~M_9) with ~M_9 = fresh_x_2 at {35} in copy a_1

out(c, ~M_10) with ~M_10 = enc(hash((seed_x_2,fresh_x_2)),q_eph_x) at {36} in copy a_1

out(c, ~M_11) with ~M_11 = enc(mul_point(mul_point(P,hash((seed_y_2,fresh_y_3))),hash((seed_x_2,fresh_x_2))),q_shared_secret_i) at {37} in copy a_1

out(c, ~M_12) with ~M_12 = enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_3))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(ipk_3,responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_4),sign(noc_signing_key,mul_point(P,responder_noc_key_4)),sign(responder_noc_key_4,(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_7),ncase_sigma2n,nil)),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_3))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(ipk_3,responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_4),sign(noc_signing_key,mul_point(P,responder_noc_key_4)),sign(responder_noc_key_4,(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_7),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_3)))))),ncase_sigma3n,nil)))),sekeys_info),q_session_keys_i) at {38} in copy a_1

new res_initiator_random: bitstring creating res_initiator_random_4 at {39} in copy a_1

out(c, (~M_13,~M_14,~M_15)) with ~M_13 = res_initiator_random_4, ~M_14 = resumption_id_7, ~M_15 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_3))),hash((seed_x_2,fresh_x_2))),(res_initiator_random_4,resumption_id_7),sigma1_resume),nil,resume1mic_nonce,nil) at {42} in copy a_1

in(c, ~M_6) with ~M_6 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(ipk_3,responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_4),sign(noc_signing_key,mul_point(P,responder_noc_key_4)),sign(responder_noc_key_4,(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_7),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_3)))))),ncase_sigma3n,nil) at {71} in copy a

out(c, ~M_16) with ~M_16 = sigma_finished at {77} in copy a

event responder_end(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),responder_random_4) at {78} in copy a

out(c, ~M_17) with ~M_17 = enc(mul_point(P,initiator_noc_key_3),q_id_i_r) at {79} in copy a

out(c, ~M_18) with ~M_18 = enc(mul_point(P,responder_noc_key_4),q_id_r_r) at {80} in copy a

out(c, ~M_19) with ~M_19 = fresh_y_3 at {81} in copy a

out(c, ~M_20) with ~M_20 = enc(hash((seed_y_2,fresh_y_3)),q_eph_y) at {82} in copy a

out(c, ~M_21) with ~M_21 = enc(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),q_shared_secret_r) at {83} in copy a

out(c, ~M_22) with ~M_22 = enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(ipk_3,responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_4),sign(noc_signing_key,mul_point(P,responder_noc_key_4)),sign(responder_noc_key_4,(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_7),ncase_sigma2n,nil)),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(ipk_3,responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_4),sign(noc_signing_key,mul_point(P,responder_noc_key_4)),sign(responder_noc_key_4,(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_7),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_3)))))),ncase_sigma3n,nil)))),sekeys_info),q_session_keys_r) at {84} in copy a

in(c, (~M_13,~M_14,~M_15)) with ~M_13 = res_initiator_random_4, ~M_14 = resumption_id_7, ~M_15 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(res_initiator_random_4,resumption_id_7),sigma1_resume),nil,resume1mic_nonce,nil) at {85} in copy a

new resumption_id_3: bitstring creating resumption_id_8 at {88} in copy a

out(c, (~M_23,~M_24)) with ~M_23 = resumption_id_8, ~M_24 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(res_initiator_random_4,resumption_id_8),sigma2_resume),nil,resume2mic_nonce,nil) at {91} in copy a

out(c, ~M_25) with ~M_25 = enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(res_initiator_random_4,resumption_id_8),sessionresumptionkeys),q_resumption_session_keys_r) at {93} in copy a

new dummy_1: bitstring creating dummy_2 at {94} in copy a

event did_not_reach_end_responder(dummy_2) at {95} in copy a

in(c, (~M_23,~M_24)) with ~M_23 = resumption_id_8, ~M_24 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(res_initiator_random_4,resumption_id_8),sigma2_resume),nil,resume2mic_nonce,nil) at {43} in copy a_1

out(c, ~M_26) with ~M_26 = enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_3))),hash((seed_x_2,fresh_x_2))),(res_initiator_random_4,resumption_id_8),sessionresumptionkeys),q_resumption_session_keys_i) at {47} in copy a_1

new dummy: bitstring creating dummy_3 at {48} in copy a_1

event did_not_reach_end_initiator(dummy_3) at {49} in copy a_1

out(c, ~M_27) with ~M_27 = seed_x_2 at {98} in copy a_2

The attacker has the message dec(kdf(mul_point(~M_4,hash((~M_27,~M_9))),(~M_13,~M_23),sessionresumptionkeys),~M_26) = q_resumption_session_keys_i in phase 2.
A trace has been found.
RESULT not attacker_p2(q_resumption_session_keys_i[]) is false.
-- Query not attacker_p2(q_resumption_session_keys_r[]) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 197 rules (102 with conclusion selected). Queue: 69 rules.
400 rules inserted. Base: 383 rules (117 with conclusion selected). Queue: 185 rules.
600 rules inserted. Base: 502 rules (117 with conclusion selected). Queue: 364 rules.
800 rules inserted. Base: 615 rules (117 with conclusion selected). Queue: 400 rules.
1000 rules inserted. Base: 704 rules (117 with conclusion selected). Queue: 461 rules.
1200 rules inserted. Base: 774 rules (122 with conclusion selected). Queue: 537 rules.
1400 rules inserted. Base: 929 rules (132 with conclusion selected). Queue: 525 rules.
1600 rules inserted. Base: 984 rules (132 with conclusion selected). Queue: 559 rules.
1800 rules inserted. Base: 1102 rules (132 with conclusion selected). Queue: 572 rules.
2000 rules inserted. Base: 1235 rules (132 with conclusion selected). Queue: 613 rules.
2200 rules inserted. Base: 1292 rules (132 with conclusion selected). Queue: 619 rules.
2400 rules inserted. Base: 1424 rules (132 with conclusion selected). Queue: 655 rules.
2600 rules inserted. Base: 1547 rules (138 with conclusion selected). Queue: 694 rules.
2800 rules inserted. Base: 1544 rules (138 with conclusion selected). Queue: 680 rules.
3000 rules inserted. Base: 1669 rules (138 with conclusion selected). Queue: 652 rules.
3200 rules inserted. Base: 1796 rules (140 with conclusion selected). Queue: 677 rules.
3400 rules inserted. Base: 1712 rules (140 with conclusion selected). Queue: 687 rules.
3600 rules inserted. Base: 1786 rules (140 with conclusion selected). Queue: 643 rules.
3800 rules inserted. Base: 1893 rules (140 with conclusion selected). Queue: 656 rules.
4000 rules inserted. Base: 1959 rules (140 with conclusion selected). Queue: 688 rules.
4200 rules inserted. Base: 2027 rules (140 with conclusion selected). Queue: 652 rules.
4400 rules inserted. Base: 2096 rules (141 with conclusion selected). Queue: 673 rules.
4600 rules inserted. Base: 2224 rules (144 with conclusion selected). Queue: 765 rules.
4800 rules inserted. Base: 2122 rules (144 with conclusion selected). Queue: 714 rules.
5000 rules inserted. Base: 2210 rules (147 with conclusion selected). Queue: 749 rules.
5200 rules inserted. Base: 2284 rules (147 with conclusion selected). Queue: 884 rules.
5400 rules inserted. Base: 2299 rules (147 with conclusion selected). Queue: 877 rules.
5600 rules inserted. Base: 2369 rules (148 with conclusion selected). Queue: 904 rules.
5800 rules inserted. Base: 2470 rules (149 with conclusion selected). Queue: 932 rules.
6000 rules inserted. Base: 2541 rules (149 with conclusion selected). Queue: 1029 rules.
6200 rules inserted. Base: 2512 rules (149 with conclusion selected). Queue: 1010 rules.
6400 rules inserted. Base: 2551 rules (149 with conclusion selected). Queue: 1028 rules.
6600 rules inserted. Base: 2662 rules (149 with conclusion selected). Queue: 1057 rules.
6800 rules inserted. Base: 2707 rules (150 with conclusion selected). Queue: 1114 rules.
7000 rules inserted. Base: 2735 rules (150 with conclusion selected). Queue: 1134 rules.
7200 rules inserted. Base: 2536 rules (150 with conclusion selected). Queue: 1089 rules.
7400 rules inserted. Base: 2586 rules (150 with conclusion selected). Queue: 1103 rules.
7600 rules inserted. Base: 2658 rules (150 with conclusion selected). Queue: 1117 rules.
7800 rules inserted. Base: 2693 rules (150 with conclusion selected). Queue: 1166 rules.
8000 rules inserted. Base: 2742 rules (150 with conclusion selected). Queue: 1137 rules.
8200 rules inserted. Base: 2720 rules (150 with conclusion selected). Queue: 1123 rules.
8400 rules inserted. Base: 2779 rules (151 with conclusion selected). Queue: 1123 rules.
8600 rules inserted. Base: 2823 rules (151 with conclusion selected). Queue: 1104 rules.
8800 rules inserted. Base: 2888 rules (152 with conclusion selected). Queue: 1159 rules.
9000 rules inserted. Base: 2937 rules (152 with conclusion selected). Queue: 1124 rules.
9200 rules inserted. Base: 2972 rules (152 with conclusion selected). Queue: 1096 rules.
9400 rules inserted. Base: 3030 rules (152 with conclusion selected). Queue: 1076 rules.
9600 rules inserted. Base: 3062 rules (152 with conclusion selected). Queue: 1032 rules.
9800 rules inserted. Base: 3095 rules (152 with conclusion selected). Queue: 1044 rules.
10000 rules inserted. Base: 3132 rules (152 with conclusion selected). Queue: 1023 rules.
10200 rules inserted. Base: 3124 rules (152 with conclusion selected). Queue: 990 rules.
10400 rules inserted. Base: 3175 rules (152 with conclusion selected). Queue: 975 rules.
10600 rules inserted. Base: 3213 rules (152 with conclusion selected). Queue: 931 rules.
10800 rules inserted. Base: 3238 rules (153 with conclusion selected). Queue: 956 rules.
11000 rules inserted. Base: 3149 rules (153 with conclusion selected). Queue: 878 rules.
11200 rules inserted. Base: 3182 rules (154 with conclusion selected). Queue: 879 rules.
11400 rules inserted. Base: 3193 rules (154 with conclusion selected). Queue: 836 rules.
11600 rules inserted. Base: 3215 rules (154 with conclusion selected). Queue: 856 rules.
11800 rules inserted. Base: 3155 rules (154 with conclusion selected). Queue: 784 rules.
12000 rules inserted. Base: 3186 rules (154 with conclusion selected). Queue: 781 rules.
12200 rules inserted. Base: 3226 rules (154 with conclusion selected). Queue: 742 rules.
12400 rules inserted. Base: 3229 rules (154 with conclusion selected). Queue: 718 rules.
12600 rules inserted. Base: 3255 rules (154 with conclusion selected). Queue: 649 rules.
12800 rules inserted. Base: 3288 rules (154 with conclusion selected). Queue: 634 rules.
13000 rules inserted. Base: 3331 rules (154 with conclusion selected). Queue: 598 rules.
13200 rules inserted. Base: 3361 rules (154 with conclusion selected). Queue: 545 rules.
13400 rules inserted. Base: 3382 rules (154 with conclusion selected). Queue: 498 rules.
13600 rules inserted. Base: 3395 rules (154 with conclusion selected). Queue: 436 rules.
13800 rules inserted. Base: 3406 rules (154 with conclusion selected). Queue: 375 rules.
14000 rules inserted. Base: 3410 rules (154 with conclusion selected). Queue: 306 rules.
14200 rules inserted. Base: 3384 rules (154 with conclusion selected). Queue: 235 rules.
14400 rules inserted. Base: 3404 rules (155 with conclusion selected). Queue: 177 rules.
14600 rules inserted. Base: 3428 rules (155 with conclusion selected). Queue: 111 rules.
14800 rules inserted. Base: 3473 rules (155 with conclusion selected). Queue: 32 rules.
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_x[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_r[])
Starting query not attacker_p2(q_resumption_session_keys_r[])
goal reachable: attacker_p2(q_resumption_session_keys_r[])

Derivation:
Abbreviations:
fresh_x_1 = fresh_x[!1 = @sid]
initiator_random_2 = initiator_random[!1 = @sid]
fresh_y_1 = fresh_y[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
responder_random_2 = responder_random_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
responder_noc_key_2 = responder_noc_key[!1 = @sid_1]
resumption_id_4 = resumption_id_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
res_initiator_random_2 = res_initiator_random[msg2 = (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)),!1 = @sid]
initiator_noc_key_2 = initiator_noc_key[!1 = @sid]
resumption_id_5 = resumption_id_3[initiator_resume1_mic_1 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil),resumption_id_2 = resumption_id_4,res_initiator_random_1 = res_initiator_random_2,msg3_1 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil),msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
responder_random_3 = responder_random_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_2]
fresh_y_2 = fresh_y[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_2]
responder_noc_key_3 = responder_noc_key[!1 = @sid_2]
resumption_id_6 = resumption_id_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_2]
res_initiator_random_3 = res_initiator_random[msg2 = (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)),!1 = @sid]

1. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) may be sent to the attacker at output {18}.
attacker((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2)).

2. By 1, the attacker may know (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2).
Using the function 2-proj-2-tuple the attacker may obtain initiator_random_2.
attacker(initiator_random_2).

3. By 1, the attacker may know (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2).
Using the function 1-proj-2-tuple the attacker may obtain mul_point(P,hash((seed_x[],fresh_x_1))).
attacker(mul_point(P,hash((seed_x[],fresh_x_1)))).

4. By 3, the attacker may know mul_point(P,hash((seed_x[],fresh_x_1))).
By 2, the attacker may know initiator_random_2.
Using the function 2-tuple the attacker may obtain (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2).
attacker((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2)).

5. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
So the message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) may be sent to the attacker at output {70}.
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

6. By 5, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 3-proj-3-tuple the attacker may obtain aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil).
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).

7. By 5, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 2-proj-3-tuple the attacker may obtain mul_point(P,hash((seed_y[],fresh_y_1))).
attacker(mul_point(P,hash((seed_y[],fresh_y_1)))).

8. By 5, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 1-proj-3-tuple the attacker may obtain responder_random_2.
attacker(responder_random_2).

9. By 8, the attacker may know responder_random_2.
By 7, the attacker may know mul_point(P,hash((seed_y[],fresh_y_1))).
By 6, the attacker may know aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil).
Using the function 3-tuple the attacker may obtain (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

10. The message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) that the attacker may have by 9 may be received at input {19}.
So the message aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil) may be sent to the attacker at output {30}.
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil)).

11. The message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) that the attacker may have by 9 may be received at input {19}.
So the message (res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)) may be sent to the attacker at output {42}.
attacker((res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil))).

12. By 11, the attacker may know (res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)).
Using the function 3-proj-3-tuple the attacker may obtain aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil).
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)).

13. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
So the message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) may be sent to the attacker at output {70}.
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

14. By 13, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 3-proj-3-tuple the attacker may obtain aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil).
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).

15. By 8, the attacker may know responder_random_2.
By 7, the attacker may know mul_point(P,hash((seed_y[],fresh_y_1))).
By 14, the attacker may know aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil).
Using the function 3-tuple the attacker may obtain (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

16. The message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) that the attacker may have by 15 may be received at input {19}.
So the message (res_initiator_random_3,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_3,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)) may be sent to the attacker at output {42}.
attacker((res_initiator_random_3,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_3,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil))).

17. By 16, the attacker may know (res_initiator_random_3,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_3,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)).
Using the function 2-proj-3-tuple the attacker may obtain resumption_id_4.
attacker(resumption_id_4).

18. By 11, the attacker may know (res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)).
Using the function 1-proj-3-tuple the attacker may obtain res_initiator_random_2.
attacker(res_initiator_random_2).

19. By 18, the attacker may know res_initiator_random_2.
By 17, the attacker may know resumption_id_4.
By 12, the attacker may know aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil).
Using the function 3-tuple the attacker may obtain (res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)).
attacker((res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil))).

20. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
The message aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil) that the attacker may have by 10 may be received at input {71}.
The message (res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)) that the attacker may have by 19 may be received at input {85}.
So the message enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sessionresumptionkeys),q_resumption_session_keys_r[]) may be sent to the attacker at output {93}.
attacker(enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sessionresumptionkeys),q_resumption_session_keys_r[])).

21. By 20, the attacker may know enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sessionresumptionkeys),q_resumption_session_keys_r[]).
So the attacker may know enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sessionresumptionkeys),q_resumption_session_keys_r[]) in phase 1.
attacker_p1(enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sessionresumptionkeys),q_resumption_session_keys_r[])).

22. Using the function sessionresumptionkeys the attacker may obtain sessionresumptionkeys in phase 1.
attacker_p1(sessionresumptionkeys).

23. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
The message aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil) that the attacker may have by 10 may be received at input {71}.
The message (res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)) that the attacker may have by 19 may be received at input {85}.
So the message (resumption_id_5,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil)) may be sent to the attacker at output {91}.
attacker((resumption_id_5,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil))).

24. By 23, the attacker may know (resumption_id_5,aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil)).
Using the function 1-proj-2-tuple the attacker may obtain resumption_id_5.
attacker(resumption_id_5).

25. By 24, the attacker may know resumption_id_5.
So the attacker may know resumption_id_5 in phase 1.
attacker_p1(resumption_id_5).

26. By 18, the attacker may know res_initiator_random_2.
So the attacker may know res_initiator_random_2 in phase 1.
attacker_p1(res_initiator_random_2).

27. By 26, the attacker may know res_initiator_random_2 in phase 1.
By 25, the attacker may know resumption_id_5 in phase 1.
Using the function 2-tuple the attacker may obtain (res_initiator_random_2,resumption_id_5) in phase 1.
attacker_p1((res_initiator_random_2,resumption_id_5)).

28. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
So the message (responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil)) may be sent to the attacker at output {70}.
attacker((responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil))).

29. By 28, the attacker may know (responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil)).
Using the function 3-proj-3-tuple the attacker may obtain aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil).
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil)).

30. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
So the message (responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_2))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil)) may be sent to the attacker at output {70}.
attacker((responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_2))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil))).

31. By 30, the attacker may know (responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_2))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil)).
Using the function 2-proj-3-tuple the attacker may obtain mul_point(P,hash((seed_y[],fresh_y_2))).
attacker(mul_point(P,hash((seed_y[],fresh_y_2)))).

32. By 30, the attacker may know (responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_2))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil)).
Using the function 1-proj-3-tuple the attacker may obtain responder_random_3.
attacker(responder_random_3).

33. By 32, the attacker may know responder_random_3.
By 31, the attacker may know mul_point(P,hash((seed_y[],fresh_y_2))).
By 29, the attacker may know aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil).
Using the function 3-tuple the attacker may obtain (responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil)).
attacker((responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil))).

34. The message (responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_2))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_3,mul_point(P,hash((seed_y[],fresh_y_2))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key[],mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y[],fresh_y_2))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_6),ncase_sigma2n,nil)) that the attacker may have by 33 may be received at input {19}.
So the message fresh_x_1 may be sent to the attacker at output {35}.
attacker(fresh_x_1).

35. By 34, the attacker may know fresh_x_1.
So the attacker may know fresh_x_1 in phase 1.
attacker_p1(fresh_x_1).

36. The message seed_x[] may be sent to the attacker in phase 1 at output {98}.
attacker_p1(seed_x[]).

37. By 36, the attacker may know seed_x[] in phase 1.
By 35, the attacker may know fresh_x_1 in phase 1.
Using the function 2-tuple the attacker may obtain (seed_x[],fresh_x_1) in phase 1.
attacker_p1((seed_x[],fresh_x_1)).

38. By 37, the attacker may know (seed_x[],fresh_x_1) in phase 1.
Using the function hash the attacker may obtain hash((seed_x[],fresh_x_1)) in phase 1.
attacker_p1(hash((seed_x[],fresh_x_1))).

39. By 7, the attacker may know mul_point(P,hash((seed_y[],fresh_y_1))).
So the attacker may know mul_point(P,hash((seed_y[],fresh_y_1))) in phase 1.
attacker_p1(mul_point(P,hash((seed_y[],fresh_y_1)))).

40. By 39, the attacker may know mul_point(P,hash((seed_y[],fresh_y_1))) in phase 1.
By 38, the attacker may know hash((seed_x[],fresh_x_1)) in phase 1.
Using the function mul_point the attacker may obtain mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))) in phase 1.
attacker_p1(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1)))).

41. By 40, the attacker may know mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))) in phase 1.
By 27, the attacker may know (res_initiator_random_2,resumption_id_5) in phase 1.
By 22, the attacker may know sessionresumptionkeys in phase 1.
Using the function kdf the attacker may obtain kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sessionresumptionkeys) in phase 1.
attacker_p1(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sessionresumptionkeys)).

42. By 41, the attacker may know kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sessionresumptionkeys) in phase 1.
By 21, the attacker may know enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(res_initiator_random_2,resumption_id_5),sessionresumptionkeys),q_resumption_session_keys_r[]) in phase 1.
Using the function dec the attacker may obtain q_resumption_session_keys_r[] in phase 1.
attacker_p1(q_resumption_session_keys_r[]).

43. By 42, the attacker may know q_resumption_session_keys_r[] in phase 1.
So the attacker may know q_resumption_session_keys_r[] in phase 2.
attacker_p2(q_resumption_session_keys_r[]).

44. By 43, attacker_p2(q_resumption_session_keys_r[]).
The goal is reached, represented in the following fact:
attacker_p2(q_resumption_session_keys_r[]).


Unified @sid_1 with @sid_2
The clause after UnifyDerivationPrecise is
attacker_p2(q_resumption_session_keys_r[])
This clause still contradicts the query.
A more detailed output of the traces is available with
  set traceDisplay = long.

new ipk: key creating ipk_3 at {1}

new seed_x: bitstring creating seed_x_2 at {2}

new seed_y: bitstring creating seed_y_2 at {3}

out(c, ~M) with ~M = mul_point(P,noc_signing_key) at {5}

new responder_noc_key: key creating responder_noc_key_4 at {51} in copy a

new initiator_noc_key: key creating initiator_noc_key_3 at {7} in copy a_1

new fresh_x: bitstring creating fresh_x_2 at {13} in copy a_1

new initiator_random: bitstring creating initiator_random_3 at {15} in copy a_1

out(c, (~M_1,~M_2)) with ~M_1 = mul_point(P,hash((seed_x_2,fresh_x_2))), ~M_2 = initiator_random_3 at {18} in copy a_1

in(c, (~M_1,~M_2)) with ~M_1 = mul_point(P,hash((seed_x_2,fresh_x_2))), ~M_2 = initiator_random_3 at {57} in copy a

event start_session_with_initiator(mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3) at {59} in copy a

new fresh_y: bitstring creating fresh_y_3 at {60} in copy a

new responder_random_1: bitstring creating responder_random_4 at {62} in copy a

new resumption_id_1: bitstring creating resumption_id_7 at {63} in copy a

out(c, (~M_3,~M_4,~M_5)) with ~M_3 = responder_random_4, ~M_4 = mul_point(P,hash((seed_y_2,fresh_y_3))), ~M_5 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(ipk_3,responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_4),sign(noc_signing_key,mul_point(P,responder_noc_key_4)),sign(responder_noc_key_4,(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_7),ncase_sigma2n,nil) at {70} in copy a

in(c, (~M_3,~M_4,~M_5)) with ~M_3 = responder_random_4, ~M_4 = mul_point(P,hash((seed_y_2,fresh_y_3))), ~M_5 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(ipk_3,responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_4),sign(noc_signing_key,mul_point(P,responder_noc_key_4)),sign(responder_noc_key_4,(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_7),ncase_sigma2n,nil) at {19} in copy a_1

event start_session_with_responder(mul_point(P,hash((seed_y_2,fresh_y_3))),responder_random_4) at {21} in copy a_1

event accept_responder_identity(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),responder_random_4) at {26} in copy a_1

out(c, ~M_6) with ~M_6 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_3))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(ipk_3,responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_4),sign(noc_signing_key,mul_point(P,responder_noc_key_4)),sign(responder_noc_key_4,(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_7),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_3)))))),ncase_sigma3n,nil) at {30} in copy a_1

event initiator_end(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3) at {32} in copy a_1

out(c, ~M_7) with ~M_7 = enc(mul_point(P,initiator_noc_key_3),q_id_i_i) at {33} in copy a_1

out(c, ~M_8) with ~M_8 = enc(mul_point(P,responder_noc_key_4),q_id_r_i) at {34} in copy a_1

out(c, ~M_9) with ~M_9 = fresh_x_2 at {35} in copy a_1

out(c, ~M_10) with ~M_10 = enc(hash((seed_x_2,fresh_x_2)),q_eph_x) at {36} in copy a_1

out(c, ~M_11) with ~M_11 = enc(mul_point(mul_point(P,hash((seed_y_2,fresh_y_3))),hash((seed_x_2,fresh_x_2))),q_shared_secret_i) at {37} in copy a_1

out(c, ~M_12) with ~M_12 = enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_3))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(ipk_3,responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_4),sign(noc_signing_key,mul_point(P,responder_noc_key_4)),sign(responder_noc_key_4,(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_7),ncase_sigma2n,nil)),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_3))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(ipk_3,responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_4),sign(noc_signing_key,mul_point(P,responder_noc_key_4)),sign(responder_noc_key_4,(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_7),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_3)))))),ncase_sigma3n,nil)))),sekeys_info),q_session_keys_i) at {38} in copy a_1

new res_initiator_random: bitstring creating res_initiator_random_4 at {39} in copy a_1

out(c, (~M_13,~M_14,~M_15)) with ~M_13 = res_initiator_random_4, ~M_14 = resumption_id_7, ~M_15 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_3))),hash((seed_x_2,fresh_x_2))),(res_initiator_random_4,resumption_id_7),sigma1_resume),nil,resume1mic_nonce,nil) at {42} in copy a_1

in(c, ~M_6) with ~M_6 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(ipk_3,responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_4),sign(noc_signing_key,mul_point(P,responder_noc_key_4)),sign(responder_noc_key_4,(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_7),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_3)))))),ncase_sigma3n,nil) at {71} in copy a

out(c, ~M_16) with ~M_16 = sigma_finished at {77} in copy a

event responder_end(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),responder_random_4) at {78} in copy a

out(c, ~M_17) with ~M_17 = enc(mul_point(P,initiator_noc_key_3),q_id_i_r) at {79} in copy a

out(c, ~M_18) with ~M_18 = enc(mul_point(P,responder_noc_key_4),q_id_r_r) at {80} in copy a

out(c, ~M_19) with ~M_19 = fresh_y_3 at {81} in copy a

out(c, ~M_20) with ~M_20 = enc(hash((seed_y_2,fresh_y_3)),q_eph_y) at {82} in copy a

out(c, ~M_21) with ~M_21 = enc(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),q_shared_secret_r) at {83} in copy a

out(c, ~M_22) with ~M_22 = enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(ipk_3,responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_4),sign(noc_signing_key,mul_point(P,responder_noc_key_4)),sign(responder_noc_key_4,(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_7),ncase_sigma2n,nil)),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(ipk_3,responder_random_4,mul_point(P,hash((seed_y_2,fresh_y_3))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_4),sign(noc_signing_key,mul_point(P,responder_noc_key_4)),sign(responder_noc_key_4,(mul_point(P,responder_noc_key_4),mul_point(P,hash((seed_y_2,fresh_y_3))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_7),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_3)))))),ncase_sigma3n,nil)))),sekeys_info),q_session_keys_r) at {84} in copy a

in(c, (~M_13,~M_14,~M_15)) with ~M_13 = res_initiator_random_4, ~M_14 = resumption_id_7, ~M_15 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(res_initiator_random_4,resumption_id_7),sigma1_resume),nil,resume1mic_nonce,nil) at {85} in copy a

new resumption_id_3: bitstring creating resumption_id_8 at {88} in copy a

out(c, (~M_23,~M_24)) with ~M_23 = resumption_id_8, ~M_24 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(res_initiator_random_4,resumption_id_8),sigma2_resume),nil,resume2mic_nonce,nil) at {91} in copy a

out(c, ~M_25) with ~M_25 = enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_3))),(res_initiator_random_4,resumption_id_8),sessionresumptionkeys),q_resumption_session_keys_r) at {93} in copy a

new dummy_1: bitstring creating dummy_2 at {94} in copy a

event did_not_reach_end_responder(dummy_2) at {95} in copy a

out(c, ~M_26) with ~M_26 = seed_x_2 at {98} in copy a_2

The attacker has the message dec(kdf(mul_point(~M_4,hash((~M_26,~M_9))),(~M_13,~M_23),sessionresumptionkeys),~M_25) = q_resumption_session_keys_r in phase 2.
A trace has been found.
RESULT not attacker_p2(q_resumption_session_keys_r[]) is false.
-- Query not event(did_not_reach_end_initiator(x_1)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 197 rules (102 with conclusion selected). Queue: 71 rules.
400 rules inserted. Base: 383 rules (117 with conclusion selected). Queue: 185 rules.
600 rules inserted. Base: 509 rules (117 with conclusion selected). Queue: 364 rules.
800 rules inserted. Base: 618 rules (117 with conclusion selected). Queue: 395 rules.
1000 rules inserted. Base: 705 rules (117 with conclusion selected). Queue: 461 rules.
1200 rules inserted. Base: 777 rules (122 with conclusion selected). Queue: 536 rules.
1400 rules inserted. Base: 929 rules (132 with conclusion selected). Queue: 527 rules.
1600 rules inserted. Base: 986 rules (132 with conclusion selected). Queue: 555 rules.
1800 rules inserted. Base: 1104 rules (132 with conclusion selected). Queue: 574 rules.
2000 rules inserted. Base: 1239 rules (132 with conclusion selected). Queue: 618 rules.
2200 rules inserted. Base: 1294 rules (132 with conclusion selected). Queue: 622 rules.
2400 rules inserted. Base: 1427 rules (132 with conclusion selected). Queue: 659 rules.
2600 rules inserted. Base: 1551 rules (138 with conclusion selected). Queue: 700 rules.
2800 rules inserted. Base: 1550 rules (138 with conclusion selected). Queue: 684 rules.
3000 rules inserted. Base: 1667 rules (138 with conclusion selected). Queue: 673 rules.
3200 rules inserted. Base: 1798 rules (140 with conclusion selected). Queue: 667 rules.
3400 rules inserted. Base: 1731 rules (140 with conclusion selected). Queue: 693 rules.
3600 rules inserted. Base: 1792 rules (140 with conclusion selected). Queue: 658 rules.
3800 rules inserted. Base: 1897 rules (140 with conclusion selected). Queue: 655 rules.
4000 rules inserted. Base: 1974 rules (140 with conclusion selected). Queue: 701 rules.
4200 rules inserted. Base: 2032 rules (140 with conclusion selected). Queue: 675 rules.
4400 rules inserted. Base: 2108 rules (141 with conclusion selected). Queue: 662 rules.
4600 rules inserted. Base: 2226 rules (144 with conclusion selected). Queue: 775 rules.
4800 rules inserted. Base: 2131 rules (144 with conclusion selected). Queue: 727 rules.
5000 rules inserted. Base: 2221 rules (147 with conclusion selected). Queue: 755 rules.
5200 rules inserted. Base: 2291 rules (147 with conclusion selected). Queue: 852 rules.
5400 rules inserted. Base: 2319 rules (147 with conclusion selected). Queue: 881 rules.
5600 rules inserted. Base: 2374 rules (148 with conclusion selected). Queue: 896 rules.
5800 rules inserted. Base: 2485 rules (148 with conclusion selected). Queue: 926 rules.
6000 rules inserted. Base: 2554 rules (149 with conclusion selected). Queue: 1004 rules.
6200 rules inserted. Base: 2532 rules (149 with conclusion selected). Queue: 1020 rules.
6400 rules inserted. Base: 2563 rules (149 with conclusion selected). Queue: 1019 rules.
6600 rules inserted. Base: 2659 rules (149 with conclusion selected). Queue: 1060 rules.
6800 rules inserted. Base: 2738 rules (150 with conclusion selected). Queue: 1119 rules.
7000 rules inserted. Base: 2748 rules (150 with conclusion selected). Queue: 1140 rules.
7200 rules inserted. Base: 2557 rules (150 with conclusion selected). Queue: 1090 rules.
7400 rules inserted. Base: 2601 rules (150 with conclusion selected). Queue: 1109 rules.
7600 rules inserted. Base: 2666 rules (150 with conclusion selected). Queue: 1117 rules.
7800 rules inserted. Base: 2719 rules (150 with conclusion selected). Queue: 1178 rules.
8000 rules inserted. Base: 2749 rules (150 with conclusion selected). Queue: 1168 rules.
8200 rules inserted. Base: 2739 rules (150 with conclusion selected). Queue: 1117 rules.
8400 rules inserted. Base: 2796 rules (151 with conclusion selected). Queue: 1129 rules.
8600 rules inserted. Base: 2847 rules (151 with conclusion selected). Queue: 1116 rules.
8800 rules inserted. Base: 2903 rules (151 with conclusion selected). Queue: 1132 rules.
9000 rules inserted. Base: 2961 rules (152 with conclusion selected). Queue: 1139 rules.
9200 rules inserted. Base: 3008 rules (152 with conclusion selected). Queue: 1085 rules.
9400 rules inserted. Base: 3054 rules (152 with conclusion selected). Queue: 1101 rules.
9600 rules inserted. Base: 3089 rules (152 with conclusion selected). Queue: 1048 rules.
9800 rules inserted. Base: 3120 rules (152 with conclusion selected). Queue: 1024 rules.
10000 rules inserted. Base: 3157 rules (152 with conclusion selected). Queue: 1037 rules.
10200 rules inserted. Base: 3155 rules (152 with conclusion selected). Queue: 993 rules.
10400 rules inserted. Base: 3198 rules (152 with conclusion selected). Queue: 991 rules.
10600 rules inserted. Base: 3233 rules (152 with conclusion selected). Queue: 956 rules.
10800 rules inserted. Base: 3254 rules (154 with conclusion selected). Queue: 967 rules.
11000 rules inserted. Base: 3234 rules (154 with conclusion selected). Queue: 904 rules.
11200 rules inserted. Base: 3193 rules (154 with conclusion selected). Queue: 860 rules.
11400 rules inserted. Base: 3222 rules (156 with conclusion selected). Queue: 852 rules.
11600 rules inserted. Base: 3236 rules (156 with conclusion selected). Queue: 836 rules.
11800 rules inserted. Base: 3200 rules (156 with conclusion selected). Queue: 818 rules.
12000 rules inserted. Base: 3211 rules (156 with conclusion selected). Queue: 768 rules.
12200 rules inserted. Base: 3245 rules (156 with conclusion selected). Queue: 760 rules.
12400 rules inserted. Base: 3245 rules (156 with conclusion selected). Queue: 740 rules.
12600 rules inserted. Base: 3288 rules (156 with conclusion selected). Queue: 664 rules.
12800 rules inserted. Base: 3308 rules (156 with conclusion selected). Queue: 648 rules.
13000 rules inserted. Base: 3343 rules (156 with conclusion selected). Queue: 612 rules.
13200 rules inserted. Base: 3374 rules (156 with conclusion selected). Queue: 557 rules.
13400 rules inserted. Base: 3413 rules (156 with conclusion selected). Queue: 515 rules.
13600 rules inserted. Base: 3420 rules (156 with conclusion selected). Queue: 445 rules.
13800 rules inserted. Base: 3422 rules (156 with conclusion selected). Queue: 381 rules.
14000 rules inserted. Base: 3452 rules (156 with conclusion selected). Queue: 315 rules.
14200 rules inserted. Base: 3431 rules (156 with conclusion selected). Queue: 258 rules.
14400 rules inserted. Base: 3415 rules (157 with conclusion selected). Queue: 190 rules.
14600 rules inserted. Base: 3457 rules (157 with conclusion selected). Queue: 127 rules.
14800 rules inserted. Base: 3485 rules (157 with conclusion selected). Queue: 60 rules.
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_x[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_r[])
Starting query not event(did_not_reach_end_initiator(x_1))
goal reachable: event(did_not_reach_end_initiator(dummy_2))
Abbreviations:
fresh_x_1 = fresh_x[!1 = @sid]
initiator_random_2 = initiator_random[!1 = @sid]
fresh_y_1 = fresh_y[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
responder_random_2 = responder_random_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
responder_noc_key_2 = responder_noc_key[!1 = @sid_1]
resumption_id_4 = resumption_id_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
res_initiator_random_2 = res_initiator_random[msg2 = (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)),!1 = @sid]
initiator_noc_key_2 = initiator_noc_key[!1 = @sid]
resumption_id_5 = resumption_id_3[initiator_resume1_mic_1 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil),resumption_id_2 = resumption_id_4,res_initiator_random_1 = res_initiator_random_2,msg3_1 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil),msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
dummy_2 = dummy[responder_resume2_mic = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil),res_resumption_id = resumption_id_5,msg2 = (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)),!1 = @sid]

Derivation:
Abbreviations:
fresh_x_1 = fresh_x[!1 = @sid]
initiator_random_2 = initiator_random[!1 = @sid]
fresh_y_1 = fresh_y[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
responder_random_2 = responder_random_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
responder_noc_key_2 = responder_noc_key[!1 = @sid_1]
resumption_id_4 = resumption_id_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
res_initiator_random_2 = res_initiator_random[msg2 = (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)),!1 = @sid]
initiator_noc_key_2 = initiator_noc_key[!1 = @sid]
resumption_id_5 = resumption_id_3[initiator_resume1_mic_1 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil),resumption_id_2 = resumption_id_4,res_initiator_random_1 = res_initiator_random_2,msg3_1 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil),msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
dummy_2 = dummy[responder_resume2_mic = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil),res_resumption_id = resumption_id_5,msg2 = (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)),!1 = @sid]

1. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) may be sent to the attacker at output {18}.
attacker((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2)).

2. By 1, the attacker may know (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2).
Using the function 2-proj-2-tuple the attacker may obtain initiator_random_2.
attacker(initiator_random_2).

3. By 1, the attacker may know (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2).
Using the function 1-proj-2-tuple the attacker may obtain mul_point(P,hash((seed_x[],fresh_x_1))).
attacker(mul_point(P,hash((seed_x[],fresh_x_1)))).

4. By 3, the attacker may know mul_point(P,hash((seed_x[],fresh_x_1))).
By 2, the attacker may know initiator_random_2.
Using the function 2-tuple the attacker may obtain (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2).
attacker((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2)).

5. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
So the message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) may be sent to the attacker at output {70}.
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

6. By 5, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 3-proj-3-tuple the attacker may obtain aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil).
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).

7. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
So the message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) may be sent to the attacker at output {70}.
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

8. By 7, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 2-proj-3-tuple the attacker may obtain mul_point(P,hash((seed_y[],fresh_y_1))).
attacker(mul_point(P,hash((seed_y[],fresh_y_1)))).

9. By 7, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 1-proj-3-tuple the attacker may obtain responder_random_2.
attacker(responder_random_2).

10. By 9, the attacker may know responder_random_2.
By 8, the attacker may know mul_point(P,hash((seed_y[],fresh_y_1))).
By 6, the attacker may know aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil).
Using the function 3-tuple the attacker may obtain (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

11. The message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) that the attacker may have by 10 may be received at input {19}.
So the message aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil) may be sent to the attacker at output {30}.
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil)).

12. The message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) that the attacker may have by 10 may be received at input {19}.
So the message (res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)) may be sent to the attacker at output {42}.
attacker((res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil))).

13. By 12, the attacker may know (res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)).
Using the function 3-proj-3-tuple the attacker may obtain aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil).
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)).

14. By 12, the attacker may know (res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)).
Using the function 2-proj-3-tuple the attacker may obtain resumption_id_4.
attacker(resumption_id_4).

15. By 12, the attacker may know (res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)).
Using the function 1-proj-3-tuple the attacker may obtain res_initiator_random_2.
attacker(res_initiator_random_2).

16. By 15, the attacker may know res_initiator_random_2.
By 14, the attacker may know resumption_id_4.
By 13, the attacker may know aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil).
Using the function 3-tuple the attacker may obtain (res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)).
attacker((res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil))).

17. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
The message aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil) that the attacker may have by 11 may be received at input {71}.
The message (res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)) that the attacker may have by 16 may be received at input {85}.
So the message (resumption_id_5,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil)) may be sent to the attacker at output {91}.
attacker((resumption_id_5,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil))).

18. By 17, the attacker may know (resumption_id_5,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil)).
Using the function 2-proj-2-tuple the attacker may obtain aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil).
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil)).

19. By 17, the attacker may know (resumption_id_5,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil)).
Using the function 1-proj-2-tuple the attacker may obtain resumption_id_5.
attacker(resumption_id_5).

20. By 19, the attacker may know resumption_id_5.
By 18, the attacker may know aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil).
Using the function 2-tuple the attacker may obtain (resumption_id_5,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil)).
attacker((resumption_id_5,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil))).

21. The message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) that the attacker may have by 10 may be received at input {19}.
The message (resumption_id_5,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_5),sigma2_resume),nil,resume2mic_nonce,nil)) that the attacker may have by 20 may be received at input {43}.
So event did_not_reach_end_initiator(dummy_2) may be executed at {49}.
event(did_not_reach_end_initiator(dummy_2)).

22. By 21, event(did_not_reach_end_initiator(dummy_2)).
The goal is reached, represented in the following fact:
event(did_not_reach_end_initiator(dummy_2)).


A more detailed output of the traces is available with
  set traceDisplay = long.

new ipk: key creating ipk_3 at {1}

new seed_x: bitstring creating seed_x_2 at {2}

new seed_y: bitstring creating seed_y_2 at {3}

out(c, ~M) with ~M = mul_point(P,noc_signing_key) at {5}

new responder_noc_key: key creating responder_noc_key_3 at {51} in copy a

new initiator_noc_key: key creating initiator_noc_key_3 at {7} in copy a_1

new fresh_x: bitstring creating fresh_x_2 at {13} in copy a_1

new initiator_random: bitstring creating initiator_random_3 at {15} in copy a_1

out(c, (~M_1,~M_2)) with ~M_1 = mul_point(P,hash((seed_x_2,fresh_x_2))), ~M_2 = initiator_random_3 at {18} in copy a_1

in(c, (~M_1,~M_2)) with ~M_1 = mul_point(P,hash((seed_x_2,fresh_x_2))), ~M_2 = initiator_random_3 at {57} in copy a

event start_session_with_initiator(mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3) at {59} in copy a

new fresh_y: bitstring creating fresh_y_2 at {60} in copy a

new responder_random_1: bitstring creating responder_random_3 at {62} in copy a

new resumption_id_1: bitstring creating resumption_id_6 at {63} in copy a

out(c, (~M_3,~M_4,~M_5)) with ~M_3 = responder_random_3, ~M_4 = mul_point(P,hash((seed_y_2,fresh_y_2))), ~M_5 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_6),ncase_sigma2n,nil) at {70} in copy a

in(c, (~M_3,~M_4,~M_5)) with ~M_3 = responder_random_3, ~M_4 = mul_point(P,hash((seed_y_2,fresh_y_2))), ~M_5 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_6),ncase_sigma2n,nil) at {19} in copy a_1

event start_session_with_responder(mul_point(P,hash((seed_y_2,fresh_y_2))),responder_random_3) at {21} in copy a_1

event accept_responder_identity(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),responder_random_3) at {26} in copy a_1

out(c, ~M_6) with ~M_6 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_6),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_2)))))),ncase_sigma3n,nil) at {30} in copy a_1

event initiator_end(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3) at {32} in copy a_1

out(c, ~M_7) with ~M_7 = enc(mul_point(P,initiator_noc_key_3),q_id_i_i) at {33} in copy a_1

out(c, ~M_8) with ~M_8 = enc(mul_point(P,responder_noc_key_3),q_id_r_i) at {34} in copy a_1

out(c, ~M_9) with ~M_9 = fresh_x_2 at {35} in copy a_1

out(c, ~M_10) with ~M_10 = enc(hash((seed_x_2,fresh_x_2)),q_eph_x) at {36} in copy a_1

out(c, ~M_11) with ~M_11 = enc(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),q_shared_secret_i) at {37} in copy a_1

out(c, ~M_12) with ~M_12 = enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_6),ncase_sigma2n,nil)),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_6),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_2)))))),ncase_sigma3n,nil)))),sekeys_info),q_session_keys_i) at {38} in copy a_1

new res_initiator_random: bitstring creating res_initiator_random_3 at {39} in copy a_1

out(c, (~M_13,~M_14,~M_15)) with ~M_13 = res_initiator_random_3, ~M_14 = resumption_id_6, ~M_15 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(res_initiator_random_3,resumption_id_6),sigma1_resume),nil,resume1mic_nonce,nil) at {42} in copy a_1

in(c, ~M_6) with ~M_6 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_6),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_2)))))),ncase_sigma3n,nil) at {71} in copy a

out(c, ~M_16) with ~M_16 = sigma_finished at {77} in copy a

event responder_end(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),responder_random_3) at {78} in copy a

out(c, ~M_17) with ~M_17 = enc(mul_point(P,initiator_noc_key_3),q_id_i_r) at {79} in copy a

out(c, ~M_18) with ~M_18 = enc(mul_point(P,responder_noc_key_3),q_id_r_r) at {80} in copy a

out(c, ~M_19) with ~M_19 = fresh_y_2 at {81} in copy a

out(c, ~M_20) with ~M_20 = enc(hash((seed_y_2,fresh_y_2)),q_eph_y) at {82} in copy a

out(c, ~M_21) with ~M_21 = enc(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),q_shared_secret_r) at {83} in copy a

out(c, ~M_22) with ~M_22 = enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_6),ncase_sigma2n,nil)),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_6),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_2)))))),ncase_sigma3n,nil)))),sekeys_info),q_session_keys_r) at {84} in copy a

in(c, (~M_13,~M_14,~M_15)) with ~M_13 = res_initiator_random_3, ~M_14 = resumption_id_6, ~M_15 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(res_initiator_random_3,resumption_id_6),sigma1_resume),nil,resume1mic_nonce,nil) at {85} in copy a

new resumption_id_3: bitstring creating resumption_id_7 at {88} in copy a

out(c, (~M_23,~M_24)) with ~M_23 = resumption_id_7, ~M_24 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(res_initiator_random_3,resumption_id_7),sigma2_resume),nil,resume2mic_nonce,nil) at {91} in copy a

out(c, ~M_25) with ~M_25 = enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(res_initiator_random_3,resumption_id_7),sessionresumptionkeys),q_resumption_session_keys_r) at {93} in copy a

new dummy_1: bitstring creating dummy_3 at {94} in copy a

event did_not_reach_end_responder(dummy_3) at {95} in copy a

in(c, (~M_23,~M_24)) with ~M_23 = resumption_id_7, ~M_24 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(res_initiator_random_3,resumption_id_7),sigma2_resume),nil,resume2mic_nonce,nil) at {43} in copy a_1

out(c, ~M_26) with ~M_26 = enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(res_initiator_random_3,resumption_id_7),sessionresumptionkeys),q_resumption_session_keys_i) at {47} in copy a_1

new dummy: bitstring creating dummy_4 at {48} in copy a_1

event did_not_reach_end_initiator(dummy_4) at {49} in copy a_1 (goal)

The event did_not_reach_end_initiator(dummy_4) is executed at {49} in copy a_1.
A trace has been found.
RESULT not event(did_not_reach_end_initiator(x_1)) is false.
-- Query not event(did_not_reach_end_responder(x_1)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 197 rules (102 with conclusion selected). Queue: 71 rules.
400 rules inserted. Base: 383 rules (117 with conclusion selected). Queue: 187 rules.
600 rules inserted. Base: 508 rules (117 with conclusion selected). Queue: 369 rules.
800 rules inserted. Base: 620 rules (117 with conclusion selected). Queue: 390 rules.
1000 rules inserted. Base: 706 rules (117 with conclusion selected). Queue: 467 rules.
1200 rules inserted. Base: 782 rules (122 with conclusion selected). Queue: 538 rules.
1400 rules inserted. Base: 928 rules (132 with conclusion selected). Queue: 535 rules.
1600 rules inserted. Base: 996 rules (132 with conclusion selected). Queue: 551 rules.
1800 rules inserted. Base: 1104 rules (132 with conclusion selected). Queue: 584 rules.
2000 rules inserted. Base: 1255 rules (132 with conclusion selected). Queue: 619 rules.
2200 rules inserted. Base: 1306 rules (132 with conclusion selected). Queue: 631 rules.
2400 rules inserted. Base: 1422 rules (132 with conclusion selected). Queue: 662 rules.
2600 rules inserted. Base: 1563 rules (138 with conclusion selected). Queue: 706 rules.
2800 rules inserted. Base: 1567 rules (138 with conclusion selected). Queue: 696 rules.
3000 rules inserted. Base: 1659 rules (138 with conclusion selected). Queue: 705 rules.
3200 rules inserted. Base: 1801 rules (140 with conclusion selected). Queue: 663 rules.
3400 rules inserted. Base: 1754 rules (140 with conclusion selected). Queue: 706 rules.
3600 rules inserted. Base: 1794 rules (140 with conclusion selected). Queue: 684 rules.
3800 rules inserted. Base: 1908 rules (140 with conclusion selected). Queue: 666 rules.
4000 rules inserted. Base: 2014 rules (140 with conclusion selected). Queue: 729 rules.
4200 rules inserted. Base: 2028 rules (140 with conclusion selected). Queue: 716 rules.
4400 rules inserted. Base: 2108 rules (141 with conclusion selected). Queue: 669 rules.
4600 rules inserted. Base: 2218 rules (145 with conclusion selected). Queue: 737 rules.
4800 rules inserted. Base: 2161 rules (145 with conclusion selected). Queue: 755 rules.
5000 rules inserted. Base: 2209 rules (149 with conclusion selected). Queue: 745 rules.
5200 rules inserted. Base: 2294 rules (149 with conclusion selected). Queue: 805 rules.
5400 rules inserted. Base: 2378 rules (149 with conclusion selected). Queue: 912 rules.
5600 rules inserted. Base: 2364 rules (149 with conclusion selected). Queue: 908 rules.
5800 rules inserted. Base: 2471 rules (150 with conclusion selected). Queue: 935 rules.
6000 rules inserted. Base: 2564 rules (151 with conclusion selected). Queue: 973 rules.
6200 rules inserted. Base: 2630 rules (151 with conclusion selected). Queue: 1040 rules.
6400 rules inserted. Base: 2582 rules (151 with conclusion selected). Queue: 1013 rules.
6600 rules inserted. Base: 2657 rules (151 with conclusion selected). Queue: 1048 rules.
6800 rules inserted. Base: 2755 rules (151 with conclusion selected). Queue: 1089 rules.
7000 rules inserted. Base: 2783 rules (152 with conclusion selected). Queue: 1130 rules.
7200 rules inserted. Base: 2607 rules (152 with conclusion selected). Queue: 1118 rules.
7400 rules inserted. Base: 2640 rules (152 with conclusion selected). Queue: 1111 rules.
7600 rules inserted. Base: 2684 rules (152 with conclusion selected). Queue: 1115 rules.
7800 rules inserted. Base: 2746 rules (152 with conclusion selected). Queue: 1153 rules.
8000 rules inserted. Base: 2774 rules (152 with conclusion selected). Queue: 1174 rules.
8200 rules inserted. Base: 2807 rules (152 with conclusion selected). Queue: 1131 rules.
8400 rules inserted. Base: 2824 rules (153 with conclusion selected). Queue: 1136 rules.
8600 rules inserted. Base: 2865 rules (153 with conclusion selected). Queue: 1120 rules.
8800 rules inserted. Base: 2928 rules (153 with conclusion selected). Queue: 1103 rules.
9000 rules inserted. Base: 2982 rules (154 with conclusion selected). Queue: 1158 rules.
9200 rules inserted. Base: 3037 rules (154 with conclusion selected). Queue: 1115 rules.
9400 rules inserted. Base: 3080 rules (154 with conclusion selected). Queue: 1100 rules.
9600 rules inserted. Base: 3123 rules (154 with conclusion selected). Queue: 1074 rules.
9800 rules inserted. Base: 3159 rules (154 with conclusion selected). Queue: 1019 rules.
10000 rules inserted. Base: 3198 rules (154 with conclusion selected). Queue: 1052 rules.
10200 rules inserted. Base: 3183 rules (154 with conclusion selected). Queue: 1009 rules.
10400 rules inserted. Base: 3222 rules (154 with conclusion selected). Queue: 980 rules.
10600 rules inserted. Base: 3274 rules (154 with conclusion selected). Queue: 973 rules.
10800 rules inserted. Base: 3309 rules (154 with conclusion selected). Queue: 930 rules.
11000 rules inserted. Base: 3317 rules (155 with conclusion selected). Queue: 937 rules.
11200 rules inserted. Base: 3242 rules (155 with conclusion selected). Queue: 868 rules.
11400 rules inserted. Base: 3288 rules (156 with conclusion selected). Queue: 874 rules.
11600 rules inserted. Base: 3287 rules (156 with conclusion selected). Queue: 831 rules.
11800 rules inserted. Base: 3313 rules (156 with conclusion selected). Queue: 847 rules.
12000 rules inserted. Base: 3256 rules (156 with conclusion selected). Queue: 782 rules.
12200 rules inserted. Base: 3292 rules (156 with conclusion selected). Queue: 777 rules.
12400 rules inserted. Base: 3289 rules (156 with conclusion selected). Queue: 737 rules.
12600 rules inserted. Base: 3331 rules (156 with conclusion selected). Queue: 700 rules.
12800 rules inserted. Base: 3360 rules (156 with conclusion selected). Queue: 647 rules.
13000 rules inserted. Base: 3389 rules (156 with conclusion selected). Queue: 627 rules.
13200 rules inserted. Base: 3426 rules (156 with conclusion selected). Queue: 595 rules.
13400 rules inserted. Base: 3461 rules (156 with conclusion selected). Queue: 532 rules.
13600 rules inserted. Base: 3471 rules (156 with conclusion selected). Queue: 475 rules.
13800 rules inserted. Base: 3476 rules (156 with conclusion selected). Queue: 408 rules.
14000 rules inserted. Base: 3492 rules (156 with conclusion selected). Queue: 363 rules.
14200 rules inserted. Base: 3478 rules (156 with conclusion selected). Queue: 281 rules.
14400 rules inserted. Base: 3454 rules (157 with conclusion selected). Queue: 220 rules.
14600 rules inserted. Base: 3506 rules (157 with conclusion selected). Queue: 160 rules.
14800 rules inserted. Base: 3527 rules (157 with conclusion selected). Queue: 95 rules.
15000 rules inserted. Base: 3546 rules (157 with conclusion selected). Queue: 7 rules.
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_i_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_id_r_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_x[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_eph_y[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker_p2(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker_p1(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_session_keys_r[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_i[])
ok, secrecy assumption verified: fact unreachable attacker(q_resumption_session_keys_r[])
Starting query not event(did_not_reach_end_responder(x_1))
goal reachable: event(did_not_reach_end_responder(dummy_2))
Abbreviations:
fresh_x_1 = fresh_x[!1 = @sid]
initiator_random_2 = initiator_random[!1 = @sid]
fresh_y_1 = fresh_y[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
responder_random_2 = responder_random_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
responder_noc_key_2 = responder_noc_key[!1 = @sid_1]
resumption_id_4 = resumption_id_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
res_initiator_random_2 = res_initiator_random[msg2 = (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)),!1 = @sid]
initiator_noc_key_2 = initiator_noc_key[!1 = @sid]
dummy_2 = dummy_1[initiator_resume1_mic_1 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil),resumption_id_2 = resumption_id_4,res_initiator_random_1 = res_initiator_random_2,msg3_1 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil),msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]

Derivation:
Abbreviations:
fresh_x_1 = fresh_x[!1 = @sid]
initiator_random_2 = initiator_random[!1 = @sid]
fresh_y_1 = fresh_y[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
responder_random_2 = responder_random_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
responder_noc_key_2 = responder_noc_key[!1 = @sid_1]
resumption_id_4 = resumption_id_1[msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]
res_initiator_random_2 = res_initiator_random[msg2 = (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)),!1 = @sid]
initiator_noc_key_2 = initiator_noc_key[!1 = @sid]
dummy_2 = dummy_1[initiator_resume1_mic_1 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil),resumption_id_2 = resumption_id_4,res_initiator_random_1 = res_initiator_random_2,msg3_1 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil),msg1_1 = (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),!1 = @sid_1]

1. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) may be sent to the attacker at output {18}.
attacker((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2)).

2. By 1, the attacker may know (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2).
Using the function 2-proj-2-tuple the attacker may obtain initiator_random_2.
attacker(initiator_random_2).

3. By 1, the attacker may know (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2).
Using the function 1-proj-2-tuple the attacker may obtain mul_point(P,hash((seed_x[],fresh_x_1))).
attacker(mul_point(P,hash((seed_x[],fresh_x_1)))).

4. By 3, the attacker may know mul_point(P,hash((seed_x[],fresh_x_1))).
By 2, the attacker may know initiator_random_2.
Using the function 2-tuple the attacker may obtain (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2).
attacker((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2)).

5. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
So the message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) may be sent to the attacker at output {70}.
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

6. By 5, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 3-proj-3-tuple the attacker may obtain aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil).
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).

7. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
So the message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) may be sent to the attacker at output {70}.
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

8. By 7, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 2-proj-3-tuple the attacker may obtain mul_point(P,hash((seed_y[],fresh_y_1))).
attacker(mul_point(P,hash((seed_y[],fresh_y_1)))).

9. By 7, the attacker may know (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x[],fresh_x_1))),hash((seed_y[],fresh_y_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
Using the function 1-proj-3-tuple the attacker may obtain responder_random_2.
attacker(responder_random_2).

10. By 9, the attacker may know responder_random_2.
By 8, the attacker may know mul_point(P,hash((seed_y[],fresh_y_1))).
By 6, the attacker may know aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil).
Using the function 3-tuple the attacker may obtain (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)).
attacker((responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))).

11. The message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) that the attacker may have by 10 may be received at input {19}.
So the message aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil) may be sent to the attacker at output {30}.
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil)).

12. The message (responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil)) that the attacker may have by 10 may be received at input {19}.
So the message (res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)) may be sent to the attacker at output {42}.
attacker((res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil))).

13. By 12, the attacker may know (res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)).
Using the function 3-proj-3-tuple the attacker may obtain aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil).
attacker(aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)).

14. By 12, the attacker may know (res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)).
Using the function 2-proj-3-tuple the attacker may obtain resumption_id_4.
attacker(resumption_id_4).

15. By 12, the attacker may know (res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)).
Using the function 1-proj-3-tuple the attacker may obtain res_initiator_random_2.
attacker(res_initiator_random_2).

16. By 15, the attacker may know res_initiator_random_2.
By 14, the attacker may know resumption_id_4.
By 13, the attacker may know aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil).
Using the function 3-tuple the attacker may obtain (res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)).
attacker((res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil))).

17. The message (mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2) that the attacker may have by 4 may be received at input {57}.
The message aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],hash(((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2),(responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(ipk[],responder_random_2,mul_point(P,hash((seed_y[],fresh_y_1))),hash((mul_point(P,hash((seed_x[],fresh_x_1))),initiator_random_2))),sigma2_info),(mul_point(P,responder_noc_key_2),sign(noc_signing_key[],mul_point(P,responder_noc_key_2)),sign(responder_noc_key_2,(mul_point(P,responder_noc_key_2),mul_point(P,hash((seed_y[],fresh_y_1))),mul_point(P,hash((seed_x[],fresh_x_1))))),resumption_id_4),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_2),sign(noc_signing_key[],mul_point(P,initiator_noc_key_2)),sign(initiator_noc_key_2,(mul_point(P,initiator_noc_key_2),mul_point(P,hash((seed_x[],fresh_x_1))),mul_point(P,hash((seed_y[],fresh_y_1)))))),ncase_sigma3n,nil) that the attacker may have by 11 may be received at input {71}.
The message (res_initiator_random_2,resumption_id_4,aead_enc(kdf(mul_point(mul_point(P,hash((seed_y[],fresh_y_1))),hash((seed_x[],fresh_x_1))),(res_initiator_random_2,resumption_id_4),sigma1_resume),nil,resume1mic_nonce,nil)) that the attacker may have by 16 may be received at input {85}.
So event did_not_reach_end_responder(dummy_2) may be executed at {95}.
event(did_not_reach_end_responder(dummy_2)).

18. By 17, event(did_not_reach_end_responder(dummy_2)).
The goal is reached, represented in the following fact:
event(did_not_reach_end_responder(dummy_2)).


A more detailed output of the traces is available with
  set traceDisplay = long.

new ipk: key creating ipk_3 at {1}

new seed_x: bitstring creating seed_x_2 at {2}

new seed_y: bitstring creating seed_y_2 at {3}

out(c, ~M) with ~M = mul_point(P,noc_signing_key) at {5}

new responder_noc_key: key creating responder_noc_key_3 at {51} in copy a

new initiator_noc_key: key creating initiator_noc_key_3 at {7} in copy a_1

new fresh_x: bitstring creating fresh_x_2 at {13} in copy a_1

new initiator_random: bitstring creating initiator_random_3 at {15} in copy a_1

out(c, (~M_1,~M_2)) with ~M_1 = mul_point(P,hash((seed_x_2,fresh_x_2))), ~M_2 = initiator_random_3 at {18} in copy a_1

in(c, (~M_1,~M_2)) with ~M_1 = mul_point(P,hash((seed_x_2,fresh_x_2))), ~M_2 = initiator_random_3 at {57} in copy a

event start_session_with_initiator(mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3) at {59} in copy a

new fresh_y: bitstring creating fresh_y_2 at {60} in copy a

new responder_random_1: bitstring creating responder_random_3 at {62} in copy a

new resumption_id_1: bitstring creating resumption_id_5 at {63} in copy a

out(c, (~M_3,~M_4,~M_5)) with ~M_3 = responder_random_3, ~M_4 = mul_point(P,hash((seed_y_2,fresh_y_2))), ~M_5 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil) at {70} in copy a

in(c, (~M_3,~M_4,~M_5)) with ~M_3 = responder_random_3, ~M_4 = mul_point(P,hash((seed_y_2,fresh_y_2))), ~M_5 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil) at {19} in copy a_1

event start_session_with_responder(mul_point(P,hash((seed_y_2,fresh_y_2))),responder_random_3) at {21} in copy a_1

event accept_responder_identity(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),responder_random_3) at {26} in copy a_1

out(c, ~M_6) with ~M_6 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_2)))))),ncase_sigma3n,nil) at {30} in copy a_1

event initiator_end(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3) at {32} in copy a_1

out(c, ~M_7) with ~M_7 = enc(mul_point(P,initiator_noc_key_3),q_id_i_i) at {33} in copy a_1

out(c, ~M_8) with ~M_8 = enc(mul_point(P,responder_noc_key_3),q_id_r_i) at {34} in copy a_1

out(c, ~M_9) with ~M_9 = fresh_x_2 at {35} in copy a_1

out(c, ~M_10) with ~M_10 = enc(hash((seed_x_2,fresh_x_2)),q_eph_x) at {36} in copy a_1

out(c, ~M_11) with ~M_11 = enc(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),q_shared_secret_i) at {37} in copy a_1

out(c, ~M_12) with ~M_12 = enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil)),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_2)))))),ncase_sigma3n,nil)))),sekeys_info),q_session_keys_i) at {38} in copy a_1

new res_initiator_random: bitstring creating res_initiator_random_3 at {39} in copy a_1

out(c, (~M_13,~M_14,~M_15)) with ~M_13 = res_initiator_random_3, ~M_14 = resumption_id_5, ~M_15 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(res_initiator_random_3,resumption_id_5),sigma1_resume),nil,resume1mic_nonce,nil) at {42} in copy a_1

in(c, ~M_6) with ~M_6 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_2)))))),ncase_sigma3n,nil) at {71} in copy a

out(c, ~M_16) with ~M_16 = sigma_finished at {77} in copy a

event responder_end(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),responder_random_3) at {78} in copy a

out(c, ~M_17) with ~M_17 = enc(mul_point(P,initiator_noc_key_3),q_id_i_r) at {79} in copy a

out(c, ~M_18) with ~M_18 = enc(mul_point(P,responder_noc_key_3),q_id_r_r) at {80} in copy a

out(c, ~M_19) with ~M_19 = fresh_y_2 at {81} in copy a

out(c, ~M_20) with ~M_20 = enc(hash((seed_y_2,fresh_y_2)),q_eph_y) at {82} in copy a

out(c, ~M_21) with ~M_21 = enc(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),q_shared_secret_r) at {83} in copy a

out(c, ~M_22) with ~M_22 = enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil)),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,hash(((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3),(responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(ipk_3,responder_random_3,mul_point(P,hash((seed_y_2,fresh_y_2))),hash((mul_point(P,hash((seed_x_2,fresh_x_2))),initiator_random_3))),sigma2_info),(mul_point(P,responder_noc_key_3),sign(noc_signing_key,mul_point(P,responder_noc_key_3)),sign(responder_noc_key_3,(mul_point(P,responder_noc_key_3),mul_point(P,hash((seed_y_2,fresh_y_2))),mul_point(P,hash((seed_x_2,fresh_x_2))))),resumption_id_5),ncase_sigma2n,nil))))),sigma3_info),(mul_point(P,initiator_noc_key_3),sign(noc_signing_key,mul_point(P,initiator_noc_key_3)),sign(initiator_noc_key_3,(mul_point(P,initiator_noc_key_3),mul_point(P,hash((seed_x_2,fresh_x_2))),mul_point(P,hash((seed_y_2,fresh_y_2)))))),ncase_sigma3n,nil)))),sekeys_info),q_session_keys_r) at {84} in copy a

in(c, (~M_13,~M_14,~M_15)) with ~M_13 = res_initiator_random_3, ~M_14 = resumption_id_5, ~M_15 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_y_2,fresh_y_2))),hash((seed_x_2,fresh_x_2))),(res_initiator_random_3,resumption_id_5),sigma1_resume),nil,resume1mic_nonce,nil) at {85} in copy a

new resumption_id_3: bitstring creating resumption_id_6 at {88} in copy a

out(c, (~M_23,~M_24)) with ~M_23 = resumption_id_6, ~M_24 = aead_enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(res_initiator_random_3,resumption_id_6),sigma2_resume),nil,resume2mic_nonce,nil) at {91} in copy a

out(c, ~M_25) with ~M_25 = enc(kdf(mul_point(mul_point(P,hash((seed_x_2,fresh_x_2))),hash((seed_y_2,fresh_y_2))),(res_initiator_random_3,resumption_id_6),sessionresumptionkeys),q_resumption_session_keys_r) at {93} in copy a

new dummy_1: bitstring creating dummy_3 at {94} in copy a

event did_not_reach_end_responder(dummy_3) at {95} in copy a (goal)

The event did_not_reach_end_responder(dummy_3) is executed at {95} in copy a.
A trace has been found.
RESULT not event(did_not_reach_end_responder(x_1)) is false.

--------------------------------------------------------------
Verification summary:

Query inj-event(responder_end(noc,k,r)) ==> inj-event(start_session_with_responder(k,r)) && inj-event(accept_responder_identity(noc,k,r)) is true.

Query inj-event(initiator_end(noc,k,r)) ==> inj-event(start_session_with_initiator(k,r)) is true.

Query not attacker_p2(q_id_i_i[]) is true.

Query not attacker_p2(q_id_i_r[]) is true.

Query not attacker_p2(q_id_r_i[]) is true.

Query not attacker_p2(q_id_r_r[]) is true.

Query not attacker_p2(q_eph_x[]) is false.

Query not attacker_p2(q_eph_y[]) is false.

Query not attacker_p2(q_shared_secret_i[]) is false.

Query not attacker_p2(q_shared_secret_r[]) is false.

Query not attacker_p2(q_session_keys_i[]) is true.

Query not attacker_p2(q_session_keys_r[]) is true.

Query not attacker_p2(q_resumption_session_keys_i[]) is false.

Query not attacker_p2(q_resumption_session_keys_r[]) is false.

Query not event(did_not_reach_end_initiator(x_1)) is false.

Query not event(did_not_reach_end_responder(x_1)) is false.

--------------------------------------------------------------

